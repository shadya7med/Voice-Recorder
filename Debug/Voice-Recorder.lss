
Voice-Recorder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002e3c  00002ed0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003b  00800068  00800068  00002ed8  2**0
                  ALLOC
  3 .stab         00002634  00000000  00000000  00002ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001161  00000000  00000000  0000550c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000666d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000067ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000691d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008566  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009451  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a200  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a360  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a5ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000adbb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 10 0b 	jmp	0x1620	; 0x1620 <__vector_1>
       8:	0c 94 3d 0b 	jmp	0x167a	; 0x167a <__vector_2>
       c:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__vector_3>
      10:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_4>
      14:	0c 94 c4 0b 	jmp	0x1788	; 0x1788 <__vector_5>
      18:	0c 94 f1 0b 	jmp	0x17e2	; 0x17e2 <__vector_6>
      1c:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__vector_7>
      20:	0c 94 4b 0c 	jmp	0x1896	; 0x1896 <__vector_8>
      24:	0c 94 78 0c 	jmp	0x18f0	; 0x18f0 <__vector_9>
      28:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_10>
      2c:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__vector_11>
      30:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__vector_12>
      34:	0c 94 2c 0d 	jmp	0x1a58	; 0x1a58 <__vector_13>
      38:	0c 94 59 0d 	jmp	0x1ab2	; 0x1ab2 <__vector_14>
      3c:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <__vector_15>
      40:	0c 94 b3 0d 	jmp	0x1b66	; 0x1b66 <__vector_16>
      44:	0c 94 e0 0d 	jmp	0x1bc0	; 0x1bc0 <__vector_17>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a3 3a       	cpi	r26, 0xA3	; 163
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e3       	ldi	r30, 0x3C	; 60
      78:	fe e2       	ldi	r31, 0x2E	; 46
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 88 12 	call	0x2510	; 0x2510 <main>
      8a:	0c 94 1c 17 	jmp	0x2e38	; 0x2e38 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e5 16 	jmp	0x2dca	; 0x2dca <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f1 16 	jmp	0x2de2	; 0x2de2 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0d 17 	jmp	0x2e1a	; 0x2e1a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f5 16 	jmp	0x2dea	; 0x2dea <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 11 17 	jmp	0x2e22	; 0x2e22 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_intialize>:
//#include "DIO_reg.h"
#include "ADC_reg.h"
#include "ADC_int.h"

void ADC_intialize(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	/*ADC Enable*/
	SET_BIT(ADCSRA_register,ADEN);
     b4e:	a6 e2       	ldi	r26, 0x26	; 38
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e6 e2       	ldi	r30, 0x26	; 38
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 68       	ori	r24, 0x80	; 128
     b5a:	8c 93       	st	X, r24
	/*REF Selection */
	SET_BIT(ADMUX_register,REFS0);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	80 64       	ori	r24, 0x40	; 64
     b68:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_register,REFS1);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	8f 77       	andi	r24, 0x7F	; 127
     b76:	8c 93       	st	X, r24

	/*ADC Left Adjusted*/
	SET_BIT(ADMUX_register,ADLAR);
     b78:	a7 e2       	ldi	r26, 0x27	; 39
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e7 e2       	ldi	r30, 0x27	; 39
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 62       	ori	r24, 0x20	; 32
     b84:	8c 93       	st	X, r24



	/*Prescalar Factor --> 2 */
	ADCSRA_register &= 0b11111000 ;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	88 7f       	andi	r24, 0xF8	; 248
     b92:	8c 93       	st	X, r24




}
     b94:	cf 91       	pop	r28
     b96:	df 91       	pop	r29
     b98:	08 95       	ret

00000b9a <ADC_GETVALUE_BLOCKING>:
u8 ADC_GETVALUE_BLOCKING(u8 u8_ChannelNum,u8 *u8_ResultCopy)
{
     b9a:	df 93       	push	r29
     b9c:	cf 93       	push	r28
     b9e:	00 d0       	rcall	.+0      	; 0xba0 <ADC_GETVALUE_BLOCKING+0x6>
     ba0:	00 d0       	rcall	.+0      	; 0xba2 <ADC_GETVALUE_BLOCKING+0x8>
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	8a 83       	std	Y+2, r24	; 0x02
     ba8:	7c 83       	std	Y+4, r23	; 0x04
     baa:	6b 83       	std	Y+3, r22	; 0x03
		u8 u8_ChannelErrorState;

	if ((u8_ChannelNum >=0) || (u8_ChannelNum <=7))
	{
		/*Channel Num Check*/
		u8_ChannelErrorState = ErrorStateOK ;
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	89 83       	std	Y+1, r24	; 0x01
		/*Analog Channel Selection*/
		ADMUX_register = (((ADMUX_register) & (ADCChannel0)) | (u8_ChannelNum));
     bb0:	a7 e2       	ldi	r26, 0x27	; 39
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e7 e2       	ldi	r30, 0x27	; 39
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	98 2f       	mov	r25, r24
     bbc:	90 7e       	andi	r25, 0xE0	; 224
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	89 2b       	or	r24, r25
     bc2:	8c 93       	st	X, r24
		/*Start Conversion*/
		SET_BIT(ADCSRA_register,ADSC);
     bc4:	a6 e2       	ldi	r26, 0x26	; 38
     bc6:	b0 e0       	ldi	r27, 0x00	; 0
     bc8:	e6 e2       	ldi	r30, 0x26	; 38
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	80 81       	ld	r24, Z
     bce:	80 64       	ori	r24, 0x40	; 64
     bd0:	8c 93       	st	X, r24
		/*read blocking*/
		while (GET_BIT(ADCSRA_register,ADIF)== 0 );
     bd2:	e6 e2       	ldi	r30, 0x26	; 38
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	80 81       	ld	r24, Z
     bd8:	82 95       	swap	r24
     bda:	8f 70       	andi	r24, 0x0F	; 15
     bdc:	88 2f       	mov	r24, r24
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	81 70       	andi	r24, 0x01	; 1
     be2:	90 70       	andi	r25, 0x00	; 0
     be4:	00 97       	sbiw	r24, 0x00	; 0
     be6:	a9 f3       	breq	.-22     	; 0xbd2 <ADC_GETVALUE_BLOCKING+0x38>

		/*Clear ADC Read flag*/
		SET_BIT(ADCSRA_register,ADIF);
     be8:	a6 e2       	ldi	r26, 0x26	; 38
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e6 e2       	ldi	r30, 0x26	; 38
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	80 61       	ori	r24, 0x10	; 16
     bf4:	8c 93       	st	X, r24
		/*read*/
		(*u8_ResultCopy) = ADCH_register;
     bf6:	e5 e2       	ldi	r30, 0x25	; 37
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	eb 81       	ldd	r30, Y+3	; 0x03
     bfe:	fc 81       	ldd	r31, Y+4	; 0x04
     c00:	80 83       	st	Z, r24



	}

return u8_ChannelErrorState ;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
}
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	cf 91       	pop	r28
     c0e:	df 91       	pop	r29
     c10:	08 95       	ret

00000c12 <DIO_SetPinDirection>:
/*Func 1 : Set Pins Direction either OUTPUT or INPUT
 *for any PIN from PIN0 --OR--> 0 to PIN7 --OR--> 7
 *at any PORT from PORTA --OR--> 0 to PORTD --OR--> 3*/

u8 DIO_SetPinDirection(u8 u8_PortIDCopy ,u8 u8_PinNumberCopy,u8 u8_PinDirectionCopy)
{
     c12:	df 93       	push	r29
     c14:	cf 93       	push	r28
     c16:	cd b7       	in	r28, 0x3d	; 61
     c18:	de b7       	in	r29, 0x3e	; 62
     c1a:	28 97       	sbiw	r28, 0x08	; 8
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	f8 94       	cli
     c20:	de bf       	out	0x3e, r29	; 62
     c22:	0f be       	out	0x3f, r0	; 63
     c24:	cd bf       	out	0x3d, r28	; 61
     c26:	8a 83       	std	Y+2, r24	; 0x02
     c28:	6b 83       	std	Y+3, r22	; 0x03
     c2a:	4c 83       	std	Y+4, r20	; 0x04
	u8 u8_ErrorState;
	if (((u8_PortIDCopy >= PORTA)&&(u8_PortIDCopy <= PORTD))&&((u8_PinNumberCopy >= PIN0)&&(u8_PinNumberCopy <= PIN7))&&((u8_PinDirectionCopy >= INPUT  )&&(u8_PinDirectionCopy <= OUTPUT )))
     c2c:	8a 81       	ldd	r24, Y+2	; 0x02
     c2e:	84 30       	cpi	r24, 0x04	; 4
     c30:	08 f0       	brcs	.+2      	; 0xc34 <DIO_SetPinDirection+0x22>
     c32:	f5 c0       	rjmp	.+490    	; 0xe1e <DIO_SetPinDirection+0x20c>
     c34:	8b 81       	ldd	r24, Y+3	; 0x03
     c36:	88 30       	cpi	r24, 0x08	; 8
     c38:	08 f0       	brcs	.+2      	; 0xc3c <DIO_SetPinDirection+0x2a>
     c3a:	f1 c0       	rjmp	.+482    	; 0xe1e <DIO_SetPinDirection+0x20c>
     c3c:	8c 81       	ldd	r24, Y+4	; 0x04
     c3e:	82 30       	cpi	r24, 0x02	; 2
     c40:	08 f0       	brcs	.+2      	; 0xc44 <DIO_SetPinDirection+0x32>
     c42:	ed c0       	rjmp	.+474    	; 0xe1e <DIO_SetPinDirection+0x20c>
	{/*Function Inputs Error check*/
		u8_ErrorState =ErrorStateOK ;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	89 83       	std	Y+1, r24	; 0x01
		/*Setting Pins Direction*/
		if (u8_PinDirectionCopy == OUTPUT)
     c48:	8c 81       	ldd	r24, Y+4	; 0x04
     c4a:	81 30       	cpi	r24, 0x01	; 1
     c4c:	09 f0       	breq	.+2      	; 0xc50 <DIO_SetPinDirection+0x3e>
     c4e:	6f c0       	rjmp	.+222    	; 0xd2e <DIO_SetPinDirection+0x11c>
		{
			switch(u8_PortIDCopy)
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	28 2f       	mov	r18, r24
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	38 87       	std	Y+8, r19	; 0x08
     c58:	2f 83       	std	Y+7, r18	; 0x07
     c5a:	8f 81       	ldd	r24, Y+7	; 0x07
     c5c:	98 85       	ldd	r25, Y+8	; 0x08
     c5e:	81 30       	cpi	r24, 0x01	; 1
     c60:	91 05       	cpc	r25, r1
     c62:	49 f1       	breq	.+82     	; 0xcb6 <DIO_SetPinDirection+0xa4>
     c64:	2f 81       	ldd	r18, Y+7	; 0x07
     c66:	38 85       	ldd	r19, Y+8	; 0x08
     c68:	22 30       	cpi	r18, 0x02	; 2
     c6a:	31 05       	cpc	r19, r1
     c6c:	2c f4       	brge	.+10     	; 0xc78 <DIO_SetPinDirection+0x66>
     c6e:	8f 81       	ldd	r24, Y+7	; 0x07
     c70:	98 85       	ldd	r25, Y+8	; 0x08
     c72:	00 97       	sbiw	r24, 0x00	; 0
     c74:	61 f0       	breq	.+24     	; 0xc8e <DIO_SetPinDirection+0x7c>
     c76:	d4 c0       	rjmp	.+424    	; 0xe20 <DIO_SetPinDirection+0x20e>
     c78:	2f 81       	ldd	r18, Y+7	; 0x07
     c7a:	38 85       	ldd	r19, Y+8	; 0x08
     c7c:	22 30       	cpi	r18, 0x02	; 2
     c7e:	31 05       	cpc	r19, r1
     c80:	71 f1       	breq	.+92     	; 0xcde <DIO_SetPinDirection+0xcc>
     c82:	8f 81       	ldd	r24, Y+7	; 0x07
     c84:	98 85       	ldd	r25, Y+8	; 0x08
     c86:	83 30       	cpi	r24, 0x03	; 3
     c88:	91 05       	cpc	r25, r1
     c8a:	e9 f1       	breq	.+122    	; 0xd06 <DIO_SetPinDirection+0xf4>
     c8c:	c9 c0       	rjmp	.+402    	; 0xe20 <DIO_SetPinDirection+0x20e>
			{
				case PORTA : 	SET_BIT(DDRA_register,u8_PinNumberCopy);	break;
     c8e:	aa e3       	ldi	r26, 0x3A	; 58
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	ea e3       	ldi	r30, 0x3A	; 58
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <DIO_SetPinDirection+0x9a>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <DIO_SetPinDirection+0x96>
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	b5 c0       	rjmp	.+362    	; 0xe20 <DIO_SetPinDirection+0x20e>
				case PORTB :	SET_BIT(DDRB_register,u8_PinNumberCopy);	break;
     cb6:	a7 e3       	ldi	r26, 0x37	; 55
     cb8:	b0 e0       	ldi	r27, 0x00	; 0
     cba:	e7 e3       	ldi	r30, 0x37	; 55
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	48 2f       	mov	r20, r24
     cc2:	8b 81       	ldd	r24, Y+3	; 0x03
     cc4:	28 2f       	mov	r18, r24
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	81 e0       	ldi	r24, 0x01	; 1
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	02 2e       	mov	r0, r18
     cce:	02 c0       	rjmp	.+4      	; 0xcd4 <DIO_SetPinDirection+0xc2>
     cd0:	88 0f       	add	r24, r24
     cd2:	99 1f       	adc	r25, r25
     cd4:	0a 94       	dec	r0
     cd6:	e2 f7       	brpl	.-8      	; 0xcd0 <DIO_SetPinDirection+0xbe>
     cd8:	84 2b       	or	r24, r20
     cda:	8c 93       	st	X, r24
     cdc:	a1 c0       	rjmp	.+322    	; 0xe20 <DIO_SetPinDirection+0x20e>
				case PORTC :	SET_BIT(DDRC_register,u8_PinNumberCopy);	break;
     cde:	a4 e3       	ldi	r26, 0x34	; 52
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e4 e3       	ldi	r30, 0x34	; 52
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	48 2f       	mov	r20, r24
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	28 2f       	mov	r18, r24
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	02 2e       	mov	r0, r18
     cf6:	02 c0       	rjmp	.+4      	; 0xcfc <DIO_SetPinDirection+0xea>
     cf8:	88 0f       	add	r24, r24
     cfa:	99 1f       	adc	r25, r25
     cfc:	0a 94       	dec	r0
     cfe:	e2 f7       	brpl	.-8      	; 0xcf8 <DIO_SetPinDirection+0xe6>
     d00:	84 2b       	or	r24, r20
     d02:	8c 93       	st	X, r24
     d04:	8d c0       	rjmp	.+282    	; 0xe20 <DIO_SetPinDirection+0x20e>
				case PORTD :	SET_BIT(DDRD_register,u8_PinNumberCopy);	break;
     d06:	a1 e3       	ldi	r26, 0x31	; 49
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e1 e3       	ldi	r30, 0x31	; 49
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	28 2f       	mov	r18, r24
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	02 2e       	mov	r0, r18
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <DIO_SetPinDirection+0x112>
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	0a 94       	dec	r0
     d26:	e2 f7       	brpl	.-8      	; 0xd20 <DIO_SetPinDirection+0x10e>
     d28:	84 2b       	or	r24, r20
     d2a:	8c 93       	st	X, r24
     d2c:	79 c0       	rjmp	.+242    	; 0xe20 <DIO_SetPinDirection+0x20e>
			}

		}
		else if (u8_PinDirectionCopy == INPUT)
     d2e:	8c 81       	ldd	r24, Y+4	; 0x04
     d30:	88 23       	and	r24, r24
     d32:	09 f0       	breq	.+2      	; 0xd36 <DIO_SetPinDirection+0x124>
     d34:	75 c0       	rjmp	.+234    	; 0xe20 <DIO_SetPinDirection+0x20e>
		{
			switch(u8_PortIDCopy)
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	28 2f       	mov	r18, r24
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	3e 83       	std	Y+6, r19	; 0x06
     d3e:	2d 83       	std	Y+5, r18	; 0x05
     d40:	8d 81       	ldd	r24, Y+5	; 0x05
     d42:	9e 81       	ldd	r25, Y+6	; 0x06
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	91 05       	cpc	r25, r1
     d48:	59 f1       	breq	.+86     	; 0xda0 <DIO_SetPinDirection+0x18e>
     d4a:	2d 81       	ldd	r18, Y+5	; 0x05
     d4c:	3e 81       	ldd	r19, Y+6	; 0x06
     d4e:	22 30       	cpi	r18, 0x02	; 2
     d50:	31 05       	cpc	r19, r1
     d52:	2c f4       	brge	.+10     	; 0xd5e <DIO_SetPinDirection+0x14c>
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	9e 81       	ldd	r25, Y+6	; 0x06
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	69 f0       	breq	.+26     	; 0xd76 <DIO_SetPinDirection+0x164>
     d5c:	61 c0       	rjmp	.+194    	; 0xe20 <DIO_SetPinDirection+0x20e>
     d5e:	2d 81       	ldd	r18, Y+5	; 0x05
     d60:	3e 81       	ldd	r19, Y+6	; 0x06
     d62:	22 30       	cpi	r18, 0x02	; 2
     d64:	31 05       	cpc	r19, r1
     d66:	89 f1       	breq	.+98     	; 0xdca <DIO_SetPinDirection+0x1b8>
     d68:	8d 81       	ldd	r24, Y+5	; 0x05
     d6a:	9e 81       	ldd	r25, Y+6	; 0x06
     d6c:	83 30       	cpi	r24, 0x03	; 3
     d6e:	91 05       	cpc	r25, r1
     d70:	09 f4       	brne	.+2      	; 0xd74 <DIO_SetPinDirection+0x162>
     d72:	40 c0       	rjmp	.+128    	; 0xdf4 <DIO_SetPinDirection+0x1e2>
     d74:	55 c0       	rjmp	.+170    	; 0xe20 <DIO_SetPinDirection+0x20e>
					{
						case PORTA :	CLR_BIT(DDRA_register,u8_PinNumberCopy);	break;
     d76:	aa e3       	ldi	r26, 0x3A	; 58
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	ea e3       	ldi	r30, 0x3A	; 58
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	48 2f       	mov	r20, r24
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	28 2f       	mov	r18, r24
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	02 2e       	mov	r0, r18
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <DIO_SetPinDirection+0x182>
     d90:	88 0f       	add	r24, r24
     d92:	99 1f       	adc	r25, r25
     d94:	0a 94       	dec	r0
     d96:	e2 f7       	brpl	.-8      	; 0xd90 <DIO_SetPinDirection+0x17e>
     d98:	80 95       	com	r24
     d9a:	84 23       	and	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	40 c0       	rjmp	.+128    	; 0xe20 <DIO_SetPinDirection+0x20e>
						case PORTB :	CLR_BIT(DDRB_register,u8_PinNumberCopy);	break;
     da0:	a7 e3       	ldi	r26, 0x37	; 55
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e7 e3       	ldi	r30, 0x37	; 55
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	02 2e       	mov	r0, r18
     db8:	02 c0       	rjmp	.+4      	; 0xdbe <DIO_SetPinDirection+0x1ac>
     dba:	88 0f       	add	r24, r24
     dbc:	99 1f       	adc	r25, r25
     dbe:	0a 94       	dec	r0
     dc0:	e2 f7       	brpl	.-8      	; 0xdba <DIO_SetPinDirection+0x1a8>
     dc2:	80 95       	com	r24
     dc4:	84 23       	and	r24, r20
     dc6:	8c 93       	st	X, r24
     dc8:	2b c0       	rjmp	.+86     	; 0xe20 <DIO_SetPinDirection+0x20e>
						case PORTC :	CLR_BIT(DDRC_register,u8_PinNumberCopy);	break;
     dca:	a4 e3       	ldi	r26, 0x34	; 52
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e4 e3       	ldi	r30, 0x34	; 52
     dd0:	f0 e0       	ldi	r31, 0x00	; 0
     dd2:	80 81       	ld	r24, Z
     dd4:	48 2f       	mov	r20, r24
     dd6:	8b 81       	ldd	r24, Y+3	; 0x03
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	02 2e       	mov	r0, r18
     de2:	02 c0       	rjmp	.+4      	; 0xde8 <DIO_SetPinDirection+0x1d6>
     de4:	88 0f       	add	r24, r24
     de6:	99 1f       	adc	r25, r25
     de8:	0a 94       	dec	r0
     dea:	e2 f7       	brpl	.-8      	; 0xde4 <DIO_SetPinDirection+0x1d2>
     dec:	80 95       	com	r24
     dee:	84 23       	and	r24, r20
     df0:	8c 93       	st	X, r24
     df2:	16 c0       	rjmp	.+44     	; 0xe20 <DIO_SetPinDirection+0x20e>
						case PORTD :	CLR_BIT(DDRD_register,u8_PinNumberCopy);	break;
     df4:	a1 e3       	ldi	r26, 0x31	; 49
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e1 e3       	ldi	r30, 0x31	; 49
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_SetPinDirection+0x200>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_SetPinDirection+0x1fc>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	01 c0       	rjmp	.+2      	; 0xe20 <DIO_SetPinDirection+0x20e>
					}
		}
	}
	else
	{
		u8_ErrorState = ErrorStateNOK ;
     e1e:	19 82       	std	Y+1, r1	; 0x01
	}
return u8_ErrorState ;
     e20:	89 81       	ldd	r24, Y+1	; 0x01

}
     e22:	28 96       	adiw	r28, 0x08	; 8
     e24:	0f b6       	in	r0, 0x3f	; 63
     e26:	f8 94       	cli
     e28:	de bf       	out	0x3e, r29	; 62
     e2a:	0f be       	out	0x3f, r0	; 63
     e2c:	cd bf       	out	0x3d, r28	; 61
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <DIO_SetPinValue>:
/*Func 2 : Set Pins values either HIGH or LOW
 *for any PIN from PIN0 --OR--> 0 to PIN7 --OR--> 7
 *at any PORT from PORTA --OR--> 0 to PORTD --OR--> 3*/

u8 DIO_SetPinValue(u8 u8_PortIDCopy ,u8 u8_PinNumberCopy,u8 u8_PinValueCopy)
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	28 97       	sbiw	r28, 0x08	; 8
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	8a 83       	std	Y+2, r24	; 0x02
     e4a:	6b 83       	std	Y+3, r22	; 0x03
     e4c:	4c 83       	std	Y+4, r20	; 0x04
	u8 u8_ErrorState;
	if (((u8_PortIDCopy >= PORTA)&&(u8_PortIDCopy <= PORTD))&&((u8_PinNumberCopy >= PIN0)&&(u8_PinNumberCopy <= PIN7))&&((u8_PinValueCopy >= LOW  )&&(u8_PinValueCopy <= HIGH )))
     e4e:	8a 81       	ldd	r24, Y+2	; 0x02
     e50:	84 30       	cpi	r24, 0x04	; 4
     e52:	08 f0       	brcs	.+2      	; 0xe56 <DIO_SetPinValue+0x22>
     e54:	f5 c0       	rjmp	.+490    	; 0x1040 <DIO_SetPinValue+0x20c>
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	88 30       	cpi	r24, 0x08	; 8
     e5a:	08 f0       	brcs	.+2      	; 0xe5e <DIO_SetPinValue+0x2a>
     e5c:	f1 c0       	rjmp	.+482    	; 0x1040 <DIO_SetPinValue+0x20c>
     e5e:	8c 81       	ldd	r24, Y+4	; 0x04
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	08 f0       	brcs	.+2      	; 0xe66 <DIO_SetPinValue+0x32>
     e64:	ed c0       	rjmp	.+474    	; 0x1040 <DIO_SetPinValue+0x20c>
		{/*Function Inputs Error check*/
		u8_ErrorState = ErrorStateOK;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	89 83       	std	Y+1, r24	; 0x01
		/*Setting PINS Value*/
		if (u8_PinValueCopy == HIGH)
     e6a:	8c 81       	ldd	r24, Y+4	; 0x04
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	09 f0       	breq	.+2      	; 0xe72 <DIO_SetPinValue+0x3e>
     e70:	6f c0       	rjmp	.+222    	; 0xf50 <DIO_SetPinValue+0x11c>
				{
					switch(u8_PortIDCopy)
     e72:	8a 81       	ldd	r24, Y+2	; 0x02
     e74:	28 2f       	mov	r18, r24
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	38 87       	std	Y+8, r19	; 0x08
     e7a:	2f 83       	std	Y+7, r18	; 0x07
     e7c:	8f 81       	ldd	r24, Y+7	; 0x07
     e7e:	98 85       	ldd	r25, Y+8	; 0x08
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	91 05       	cpc	r25, r1
     e84:	49 f1       	breq	.+82     	; 0xed8 <DIO_SetPinValue+0xa4>
     e86:	2f 81       	ldd	r18, Y+7	; 0x07
     e88:	38 85       	ldd	r19, Y+8	; 0x08
     e8a:	22 30       	cpi	r18, 0x02	; 2
     e8c:	31 05       	cpc	r19, r1
     e8e:	2c f4       	brge	.+10     	; 0xe9a <DIO_SetPinValue+0x66>
     e90:	8f 81       	ldd	r24, Y+7	; 0x07
     e92:	98 85       	ldd	r25, Y+8	; 0x08
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	61 f0       	breq	.+24     	; 0xeb0 <DIO_SetPinValue+0x7c>
     e98:	d4 c0       	rjmp	.+424    	; 0x1042 <DIO_SetPinValue+0x20e>
     e9a:	2f 81       	ldd	r18, Y+7	; 0x07
     e9c:	38 85       	ldd	r19, Y+8	; 0x08
     e9e:	22 30       	cpi	r18, 0x02	; 2
     ea0:	31 05       	cpc	r19, r1
     ea2:	71 f1       	breq	.+92     	; 0xf00 <DIO_SetPinValue+0xcc>
     ea4:	8f 81       	ldd	r24, Y+7	; 0x07
     ea6:	98 85       	ldd	r25, Y+8	; 0x08
     ea8:	83 30       	cpi	r24, 0x03	; 3
     eaa:	91 05       	cpc	r25, r1
     eac:	e9 f1       	breq	.+122    	; 0xf28 <DIO_SetPinValue+0xf4>
     eae:	c9 c0       	rjmp	.+402    	; 0x1042 <DIO_SetPinValue+0x20e>
					{
						case PORTA : 	SET_BIT(PORTA_register,u8_PinNumberCopy);	break;
     eb0:	ab e3       	ldi	r26, 0x3B	; 59
     eb2:	b0 e0       	ldi	r27, 0x00	; 0
     eb4:	eb e3       	ldi	r30, 0x3B	; 59
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 81       	ld	r24, Z
     eba:	48 2f       	mov	r20, r24
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	02 2e       	mov	r0, r18
     ec8:	02 c0       	rjmp	.+4      	; 0xece <DIO_SetPinValue+0x9a>
     eca:	88 0f       	add	r24, r24
     ecc:	99 1f       	adc	r25, r25
     ece:	0a 94       	dec	r0
     ed0:	e2 f7       	brpl	.-8      	; 0xeca <DIO_SetPinValue+0x96>
     ed2:	84 2b       	or	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	b5 c0       	rjmp	.+362    	; 0x1042 <DIO_SetPinValue+0x20e>
						case PORTB :	SET_BIT(PORTB_register,u8_PinNumberCopy);	break;
     ed8:	a8 e3       	ldi	r26, 0x38	; 56
     eda:	b0 e0       	ldi	r27, 0x00	; 0
     edc:	e8 e3       	ldi	r30, 0x38	; 56
     ede:	f0 e0       	ldi	r31, 0x00	; 0
     ee0:	80 81       	ld	r24, Z
     ee2:	48 2f       	mov	r20, r24
     ee4:	8b 81       	ldd	r24, Y+3	; 0x03
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	02 2e       	mov	r0, r18
     ef0:	02 c0       	rjmp	.+4      	; 0xef6 <DIO_SetPinValue+0xc2>
     ef2:	88 0f       	add	r24, r24
     ef4:	99 1f       	adc	r25, r25
     ef6:	0a 94       	dec	r0
     ef8:	e2 f7       	brpl	.-8      	; 0xef2 <DIO_SetPinValue+0xbe>
     efa:	84 2b       	or	r24, r20
     efc:	8c 93       	st	X, r24
     efe:	a1 c0       	rjmp	.+322    	; 0x1042 <DIO_SetPinValue+0x20e>
						case PORTC :	SET_BIT(PORTC_register,u8_PinNumberCopy);	break;
     f00:	a5 e3       	ldi	r26, 0x35	; 53
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e5 e3       	ldi	r30, 0x35	; 53
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	48 2f       	mov	r20, r24
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	02 2e       	mov	r0, r18
     f18:	02 c0       	rjmp	.+4      	; 0xf1e <DIO_SetPinValue+0xea>
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	0a 94       	dec	r0
     f20:	e2 f7       	brpl	.-8      	; 0xf1a <DIO_SetPinValue+0xe6>
     f22:	84 2b       	or	r24, r20
     f24:	8c 93       	st	X, r24
     f26:	8d c0       	rjmp	.+282    	; 0x1042 <DIO_SetPinValue+0x20e>
						case PORTD :	SET_BIT(PORTD_register,u8_PinNumberCopy);	break;
     f28:	a2 e3       	ldi	r26, 0x32	; 50
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	e2 e3       	ldi	r30, 0x32	; 50
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <DIO_SetPinValue+0x112>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <DIO_SetPinValue+0x10e>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	79 c0       	rjmp	.+242    	; 0x1042 <DIO_SetPinValue+0x20e>
					}

				}
				else if (u8_PinValueCopy == LOW)
     f50:	8c 81       	ldd	r24, Y+4	; 0x04
     f52:	88 23       	and	r24, r24
     f54:	09 f0       	breq	.+2      	; 0xf58 <DIO_SetPinValue+0x124>
     f56:	75 c0       	rjmp	.+234    	; 0x1042 <DIO_SetPinValue+0x20e>
				{
					switch(u8_PortIDCopy)
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	3e 83       	std	Y+6, r19	; 0x06
     f60:	2d 83       	std	Y+5, r18	; 0x05
     f62:	8d 81       	ldd	r24, Y+5	; 0x05
     f64:	9e 81       	ldd	r25, Y+6	; 0x06
     f66:	81 30       	cpi	r24, 0x01	; 1
     f68:	91 05       	cpc	r25, r1
     f6a:	59 f1       	breq	.+86     	; 0xfc2 <DIO_SetPinValue+0x18e>
     f6c:	2d 81       	ldd	r18, Y+5	; 0x05
     f6e:	3e 81       	ldd	r19, Y+6	; 0x06
     f70:	22 30       	cpi	r18, 0x02	; 2
     f72:	31 05       	cpc	r19, r1
     f74:	2c f4       	brge	.+10     	; 0xf80 <DIO_SetPinValue+0x14c>
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	00 97       	sbiw	r24, 0x00	; 0
     f7c:	69 f0       	breq	.+26     	; 0xf98 <DIO_SetPinValue+0x164>
     f7e:	61 c0       	rjmp	.+194    	; 0x1042 <DIO_SetPinValue+0x20e>
     f80:	2d 81       	ldd	r18, Y+5	; 0x05
     f82:	3e 81       	ldd	r19, Y+6	; 0x06
     f84:	22 30       	cpi	r18, 0x02	; 2
     f86:	31 05       	cpc	r19, r1
     f88:	89 f1       	breq	.+98     	; 0xfec <DIO_SetPinValue+0x1b8>
     f8a:	8d 81       	ldd	r24, Y+5	; 0x05
     f8c:	9e 81       	ldd	r25, Y+6	; 0x06
     f8e:	83 30       	cpi	r24, 0x03	; 3
     f90:	91 05       	cpc	r25, r1
     f92:	09 f4       	brne	.+2      	; 0xf96 <DIO_SetPinValue+0x162>
     f94:	40 c0       	rjmp	.+128    	; 0x1016 <DIO_SetPinValue+0x1e2>
     f96:	55 c0       	rjmp	.+170    	; 0x1042 <DIO_SetPinValue+0x20e>
							{
								case PORTA :	CLR_BIT(PORTA_register,u8_PinNumberCopy);	break;
     f98:	ab e3       	ldi	r26, 0x3B	; 59
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	eb e3       	ldi	r30, 0x3B	; 59
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <DIO_SetPinValue+0x182>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <DIO_SetPinValue+0x17e>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
     fc0:	40 c0       	rjmp	.+128    	; 0x1042 <DIO_SetPinValue+0x20e>
								case PORTB :	CLR_BIT(PORTB_register,u8_PinNumberCopy);	break;
     fc2:	a8 e3       	ldi	r26, 0x38	; 56
     fc4:	b0 e0       	ldi	r27, 0x00	; 0
     fc6:	e8 e3       	ldi	r30, 0x38	; 56
     fc8:	f0 e0       	ldi	r31, 0x00	; 0
     fca:	80 81       	ld	r24, Z
     fcc:	48 2f       	mov	r20, r24
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	28 2f       	mov	r18, r24
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_SetPinValue+0x1ac>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_SetPinValue+0x1a8>
     fe4:	80 95       	com	r24
     fe6:	84 23       	and	r24, r20
     fe8:	8c 93       	st	X, r24
     fea:	2b c0       	rjmp	.+86     	; 0x1042 <DIO_SetPinValue+0x20e>
								case PORTC :	CLR_BIT(PORTC_register,u8_PinNumberCopy);	break;
     fec:	a5 e3       	ldi	r26, 0x35	; 53
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e3       	ldi	r30, 0x35	; 53
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8b 81       	ldd	r24, Y+3	; 0x03
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <DIO_SetPinValue+0x1d6>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <DIO_SetPinValue+0x1d2>
    100e:	80 95       	com	r24
    1010:	84 23       	and	r24, r20
    1012:	8c 93       	st	X, r24
    1014:	16 c0       	rjmp	.+44     	; 0x1042 <DIO_SetPinValue+0x20e>
								case PORTD :	CLR_BIT(PORTD_register,u8_PinNumberCopy);	break;
    1016:	a2 e3       	ldi	r26, 0x32	; 50
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e2 e3       	ldi	r30, 0x32	; 50
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_SetPinValue+0x200>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_SetPinValue+0x1fc>
    1038:	80 95       	com	r24
    103a:	84 23       	and	r24, r20
    103c:	8c 93       	st	X, r24
    103e:	01 c0       	rjmp	.+2      	; 0x1042 <DIO_SetPinValue+0x20e>


		}
	else
	{
		u8_ErrorState = ErrorStateNOK;
    1040:	19 82       	std	Y+1, r1	; 0x01
	}




return u8_ErrorState;
    1042:	89 81       	ldd	r24, Y+1	; 0x01
}
    1044:	28 96       	adiw	r28, 0x08	; 8
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	cf 91       	pop	r28
    1052:	df 91       	pop	r29
    1054:	08 95       	ret

00001056 <DIO_GetPinValue>:
/*Func 3: Get Pins values
 *for any PIN from PIN0 --OR--> 0 to PIN7 --OR--> 7
 *at any PORT from PORTA --OR--> 0 to PORTD --OR--> 3*/

u8 DIO_GetPinValue(u8 u8_PortIDCopy ,u8 u8_PinNumberCopy,u8 * u8_PinValueCopy)
{
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	27 97       	sbiw	r28, 0x07	; 7
    1060:	0f b6       	in	r0, 0x3f	; 63
    1062:	f8 94       	cli
    1064:	de bf       	out	0x3e, r29	; 62
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	cd bf       	out	0x3d, r28	; 61
    106a:	8a 83       	std	Y+2, r24	; 0x02
    106c:	6b 83       	std	Y+3, r22	; 0x03
    106e:	5d 83       	std	Y+5, r21	; 0x05
    1070:	4c 83       	std	Y+4, r20	; 0x04
	u8 u8_ErrorState;
	if (((u8_PortIDCopy >= PORTA)&&(u8_PortIDCopy <= PORTD))&&((u8_PinNumberCopy >= PIN0)&&(u8_PinNumberCopy <= PIN7)))
    1072:	8a 81       	ldd	r24, Y+2	; 0x02
    1074:	84 30       	cpi	r24, 0x04	; 4
    1076:	08 f0       	brcs	.+2      	; 0x107a <DIO_GetPinValue+0x24>
    1078:	77 c0       	rjmp	.+238    	; 0x1168 <DIO_GetPinValue+0x112>
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	88 30       	cpi	r24, 0x08	; 8
    107e:	08 f0       	brcs	.+2      	; 0x1082 <DIO_GetPinValue+0x2c>
    1080:	73 c0       	rjmp	.+230    	; 0x1168 <DIO_GetPinValue+0x112>
	{/*Function Inputs Error check*/
		u8_ErrorState =ErrorStateOK ;
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	89 83       	std	Y+1, r24	; 0x01
		/*Getting Pins Value*/

			switch(u8_PortIDCopy)
    1086:	8a 81       	ldd	r24, Y+2	; 0x02
    1088:	28 2f       	mov	r18, r24
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	3f 83       	std	Y+7, r19	; 0x07
    108e:	2e 83       	std	Y+6, r18	; 0x06
    1090:	4e 81       	ldd	r20, Y+6	; 0x06
    1092:	5f 81       	ldd	r21, Y+7	; 0x07
    1094:	41 30       	cpi	r20, 0x01	; 1
    1096:	51 05       	cpc	r21, r1
    1098:	59 f1       	breq	.+86     	; 0x10f0 <DIO_GetPinValue+0x9a>
    109a:	8e 81       	ldd	r24, Y+6	; 0x06
    109c:	9f 81       	ldd	r25, Y+7	; 0x07
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	91 05       	cpc	r25, r1
    10a2:	34 f4       	brge	.+12     	; 0x10b0 <DIO_GetPinValue+0x5a>
    10a4:	2e 81       	ldd	r18, Y+6	; 0x06
    10a6:	3f 81       	ldd	r19, Y+7	; 0x07
    10a8:	21 15       	cp	r18, r1
    10aa:	31 05       	cpc	r19, r1
    10ac:	69 f0       	breq	.+26     	; 0x10c8 <DIO_GetPinValue+0x72>
    10ae:	5d c0       	rjmp	.+186    	; 0x116a <DIO_GetPinValue+0x114>
    10b0:	4e 81       	ldd	r20, Y+6	; 0x06
    10b2:	5f 81       	ldd	r21, Y+7	; 0x07
    10b4:	42 30       	cpi	r20, 0x02	; 2
    10b6:	51 05       	cpc	r21, r1
    10b8:	79 f1       	breq	.+94     	; 0x1118 <DIO_GetPinValue+0xc2>
    10ba:	8e 81       	ldd	r24, Y+6	; 0x06
    10bc:	9f 81       	ldd	r25, Y+7	; 0x07
    10be:	83 30       	cpi	r24, 0x03	; 3
    10c0:	91 05       	cpc	r25, r1
    10c2:	09 f4       	brne	.+2      	; 0x10c6 <DIO_GetPinValue+0x70>
    10c4:	3d c0       	rjmp	.+122    	; 0x1140 <DIO_GetPinValue+0xea>
    10c6:	51 c0       	rjmp	.+162    	; 0x116a <DIO_GetPinValue+0x114>
			{
				case PORTA : 	(* u8_PinValueCopy) = GET_BIT(PINA_register,u8_PinNumberCopy);	break;
    10c8:	e9 e3       	ldi	r30, 0x39	; 57
    10ca:	f0 e0       	ldi	r31, 0x00	; 0
    10cc:	80 81       	ld	r24, Z
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	88 2f       	mov	r24, r24
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	a9 01       	movw	r20, r18
    10da:	02 c0       	rjmp	.+4      	; 0x10e0 <DIO_GetPinValue+0x8a>
    10dc:	55 95       	asr	r21
    10de:	47 95       	ror	r20
    10e0:	8a 95       	dec	r24
    10e2:	e2 f7       	brpl	.-8      	; 0x10dc <DIO_GetPinValue+0x86>
    10e4:	ca 01       	movw	r24, r20
    10e6:	81 70       	andi	r24, 0x01	; 1
    10e8:	ec 81       	ldd	r30, Y+4	; 0x04
    10ea:	fd 81       	ldd	r31, Y+5	; 0x05
    10ec:	80 83       	st	Z, r24
    10ee:	3d c0       	rjmp	.+122    	; 0x116a <DIO_GetPinValue+0x114>
				case PORTB :	(* u8_PinValueCopy) = GET_BIT(PINB_register,u8_PinNumberCopy);	break;
    10f0:	e6 e3       	ldi	r30, 0x36	; 54
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	80 81       	ld	r24, Z
    10f6:	28 2f       	mov	r18, r24
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	88 2f       	mov	r24, r24
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	a9 01       	movw	r20, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <DIO_GetPinValue+0xb2>
    1104:	55 95       	asr	r21
    1106:	47 95       	ror	r20
    1108:	8a 95       	dec	r24
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <DIO_GetPinValue+0xae>
    110c:	ca 01       	movw	r24, r20
    110e:	81 70       	andi	r24, 0x01	; 1
    1110:	ec 81       	ldd	r30, Y+4	; 0x04
    1112:	fd 81       	ldd	r31, Y+5	; 0x05
    1114:	80 83       	st	Z, r24
    1116:	29 c0       	rjmp	.+82     	; 0x116a <DIO_GetPinValue+0x114>
				case PORTC :	(* u8_PinValueCopy) = GET_BIT(PINA_register,u8_PinNumberCopy);	break;
    1118:	e9 e3       	ldi	r30, 0x39	; 57
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a9 01       	movw	r20, r18
    112a:	02 c0       	rjmp	.+4      	; 0x1130 <DIO_GetPinValue+0xda>
    112c:	55 95       	asr	r21
    112e:	47 95       	ror	r20
    1130:	8a 95       	dec	r24
    1132:	e2 f7       	brpl	.-8      	; 0x112c <DIO_GetPinValue+0xd6>
    1134:	ca 01       	movw	r24, r20
    1136:	81 70       	andi	r24, 0x01	; 1
    1138:	ec 81       	ldd	r30, Y+4	; 0x04
    113a:	fd 81       	ldd	r31, Y+5	; 0x05
    113c:	80 83       	st	Z, r24
    113e:	15 c0       	rjmp	.+42     	; 0x116a <DIO_GetPinValue+0x114>
				case PORTD :	(* u8_PinValueCopy) = GET_BIT(PINA_register,u8_PinNumberCopy);	break;
    1140:	e9 e3       	ldi	r30, 0x39	; 57
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	88 2f       	mov	r24, r24
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	a9 01       	movw	r20, r18
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <DIO_GetPinValue+0x102>
    1154:	55 95       	asr	r21
    1156:	47 95       	ror	r20
    1158:	8a 95       	dec	r24
    115a:	e2 f7       	brpl	.-8      	; 0x1154 <DIO_GetPinValue+0xfe>
    115c:	ca 01       	movw	r24, r20
    115e:	81 70       	andi	r24, 0x01	; 1
    1160:	ec 81       	ldd	r30, Y+4	; 0x04
    1162:	fd 81       	ldd	r31, Y+5	; 0x05
    1164:	80 83       	st	Z, r24
    1166:	01 c0       	rjmp	.+2      	; 0x116a <DIO_GetPinValue+0x114>
			}

	}
	else
	{
		u8_ErrorState = ErrorStateNOK ;
    1168:	19 82       	std	Y+1, r1	; 0x01
	}
return u8_ErrorState ;
    116a:	89 81       	ldd	r24, Y+1	; 0x01

}
    116c:	27 96       	adiw	r28, 0x07	; 7
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	de bf       	out	0x3e, r29	; 62
    1174:	0f be       	out	0x3f, r0	; 63
    1176:	cd bf       	out	0x3d, r28	; 61
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <DIO_TogPinValue>:
/*Func 4 : toggle Pins values
 *for any PIN from PIN0 --OR--> 0 to PIN7 --OR--> 7
 *at any PORT from PORTA --OR--> 0 to PORTD --OR--> 3*/

u8 DIO_TogPinValue(u8 u8_PortIDCopy ,u8 u8_PinNumberCopy)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <DIO_TogPinValue+0x6>
    1184:	00 d0       	rcall	.+0      	; 0x1186 <DIO_TogPinValue+0x8>
    1186:	0f 92       	push	r0
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
    118c:	8a 83       	std	Y+2, r24	; 0x02
    118e:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8_ErrorState;


	if (((u8_PortIDCopy >= PORTA)&&(u8_PortIDCopy <= PORTD))&&((u8_PinNumberCopy >= PIN0)&&(u8_PinNumberCopy <= PIN7)))
    1190:	8a 81       	ldd	r24, Y+2	; 0x02
    1192:	84 30       	cpi	r24, 0x04	; 4
    1194:	08 f0       	brcs	.+2      	; 0x1198 <DIO_TogPinValue+0x1a>
    1196:	75 c0       	rjmp	.+234    	; 0x1282 <DIO_TogPinValue+0x104>
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	88 30       	cpi	r24, 0x08	; 8
    119c:	08 f0       	brcs	.+2      	; 0x11a0 <DIO_TogPinValue+0x22>
    119e:	71 c0       	rjmp	.+226    	; 0x1282 <DIO_TogPinValue+0x104>
	{/*Function Inputs Error check*/
		u8_ErrorState =ErrorStateOK ;
    11a0:	81 e0       	ldi	r24, 0x01	; 1
    11a2:	89 83       	std	Y+1, r24	; 0x01
		/*Toggle Pins Value*/

			switch(u8_PortIDCopy)
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3d 83       	std	Y+5, r19	; 0x05
    11ac:	2c 83       	std	Y+4, r18	; 0x04
    11ae:	8c 81       	ldd	r24, Y+4	; 0x04
    11b0:	9d 81       	ldd	r25, Y+5	; 0x05
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	49 f1       	breq	.+82     	; 0x120a <DIO_TogPinValue+0x8c>
    11b8:	2c 81       	ldd	r18, Y+4	; 0x04
    11ba:	3d 81       	ldd	r19, Y+5	; 0x05
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	2c f4       	brge	.+10     	; 0x11cc <DIO_TogPinValue+0x4e>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <DIO_TogPinValue+0x64>
    11ca:	5c c0       	rjmp	.+184    	; 0x1284 <DIO_TogPinValue+0x106>
    11cc:	2c 81       	ldd	r18, Y+4	; 0x04
    11ce:	3d 81       	ldd	r19, Y+5	; 0x05
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	71 f1       	breq	.+92     	; 0x1232 <DIO_TogPinValue+0xb4>
    11d6:	8c 81       	ldd	r24, Y+4	; 0x04
    11d8:	9d 81       	ldd	r25, Y+5	; 0x05
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	e9 f1       	breq	.+122    	; 0x125a <DIO_TogPinValue+0xdc>
    11e0:	51 c0       	rjmp	.+162    	; 0x1284 <DIO_TogPinValue+0x106>
			{
				case PORTA : 	 TOG_BIT(PORTA_register,u8_PinNumberCopy);	break;
    11e2:	ab e3       	ldi	r26, 0x3B	; 59
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	eb e3       	ldi	r30, 0x3B	; 59
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8b 81       	ldd	r24, Y+3	; 0x03
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_TogPinValue+0x82>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_TogPinValue+0x7e>
    1204:	84 27       	eor	r24, r20
    1206:	8c 93       	st	X, r24
    1208:	3d c0       	rjmp	.+122    	; 0x1284 <DIO_TogPinValue+0x106>
				case PORTB :	 TOG_BIT(PORTB_register,u8_PinNumberCopy);	break;
    120a:	a8 e3       	ldi	r26, 0x38	; 56
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e8 e3       	ldi	r30, 0x38	; 56
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	48 2f       	mov	r20, r24
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	02 2e       	mov	r0, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_TogPinValue+0xaa>
    1224:	88 0f       	add	r24, r24
    1226:	99 1f       	adc	r25, r25
    1228:	0a 94       	dec	r0
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_TogPinValue+0xa6>
    122c:	84 27       	eor	r24, r20
    122e:	8c 93       	st	X, r24
    1230:	29 c0       	rjmp	.+82     	; 0x1284 <DIO_TogPinValue+0x106>
				case PORTC :	 TOG_BIT(PORTC_register,u8_PinNumberCopy);	break;
    1232:	a5 e3       	ldi	r26, 0x35	; 53
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	e5 e3       	ldi	r30, 0x35	; 53
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	48 2f       	mov	r20, r24
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	28 2f       	mov	r18, r24
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	02 2e       	mov	r0, r18
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <DIO_TogPinValue+0xd2>
    124c:	88 0f       	add	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	0a 94       	dec	r0
    1252:	e2 f7       	brpl	.-8      	; 0x124c <DIO_TogPinValue+0xce>
    1254:	84 27       	eor	r24, r20
    1256:	8c 93       	st	X, r24
    1258:	15 c0       	rjmp	.+42     	; 0x1284 <DIO_TogPinValue+0x106>
				case PORTD :	 TOG_BIT(PORTD_register,u8_PinNumberCopy);	break;
    125a:	a2 e3       	ldi	r26, 0x32	; 50
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	e2 e3       	ldi	r30, 0x32	; 50
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	80 81       	ld	r24, Z
    1264:	48 2f       	mov	r20, r24
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	02 2e       	mov	r0, r18
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <DIO_TogPinValue+0xfa>
    1274:	88 0f       	add	r24, r24
    1276:	99 1f       	adc	r25, r25
    1278:	0a 94       	dec	r0
    127a:	e2 f7       	brpl	.-8      	; 0x1274 <DIO_TogPinValue+0xf6>
    127c:	84 27       	eor	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	01 c0       	rjmp	.+2      	; 0x1284 <DIO_TogPinValue+0x106>


	}
	else
	{
		u8_ErrorState = ErrorStateNOK ;
    1282:	19 82       	std	Y+1, r1	; 0x01
	}
return u8_ErrorState ;
    1284:	89 81       	ldd	r24, Y+1	; 0x01

}
    1286:	0f 90       	pop	r0
    1288:	0f 90       	pop	r0
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <DIO_SetPortDirection>:
 *PS : Note : NOISE on non-PULLED Input PINS */



u8 DIO_SetPortDirection(u8 u8_PortIDCopy,u8 u8_PortDirectionCopy)
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	00 d0       	rcall	.+0      	; 0x129c <DIO_SetPortDirection+0x6>
    129c:	00 d0       	rcall	.+0      	; 0x129e <DIO_SetPortDirection+0x8>
    129e:	0f 92       	push	r0
    12a0:	cd b7       	in	r28, 0x3d	; 61
    12a2:	de b7       	in	r29, 0x3e	; 62
    12a4:	8a 83       	std	Y+2, r24	; 0x02
    12a6:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8_ErrorState;
	if ((u8_PortIDCopy >= PORTA) && (u8_PortIDCopy <= PORTD)&& (u8_PortDirectionCopy >= PORT_INPUT) && (u8_PortDirectionCopy <= PORT_OUTPUT))
    12a8:	8a 81       	ldd	r24, Y+2	; 0x02
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	a8 f5       	brcc	.+106    	; 0x1318 <DIO_SetPortDirection+0x82>
		{/*Error Check */
			u8_ErrorState = ErrorStateOK;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	89 83       	std	Y+1, r24	; 0x01
		 /*Setting PORT Direction*/
			switch(u8_PortIDCopy)
    12b2:	8a 81       	ldd	r24, Y+2	; 0x02
    12b4:	28 2f       	mov	r18, r24
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	3d 83       	std	Y+5, r19	; 0x05
    12ba:	2c 83       	std	Y+4, r18	; 0x04
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	9d 81       	ldd	r25, Y+5	; 0x05
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	91 05       	cpc	r25, r1
    12c4:	d1 f0       	breq	.+52     	; 0x12fa <DIO_SetPortDirection+0x64>
    12c6:	2c 81       	ldd	r18, Y+4	; 0x04
    12c8:	3d 81       	ldd	r19, Y+5	; 0x05
    12ca:	22 30       	cpi	r18, 0x02	; 2
    12cc:	31 05       	cpc	r19, r1
    12ce:	2c f4       	brge	.+10     	; 0x12da <DIO_SetPortDirection+0x44>
    12d0:	8c 81       	ldd	r24, Y+4	; 0x04
    12d2:	9d 81       	ldd	r25, Y+5	; 0x05
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	61 f0       	breq	.+24     	; 0x12f0 <DIO_SetPortDirection+0x5a>
    12d8:	20 c0       	rjmp	.+64     	; 0x131a <DIO_SetPortDirection+0x84>
    12da:	2c 81       	ldd	r18, Y+4	; 0x04
    12dc:	3d 81       	ldd	r19, Y+5	; 0x05
    12de:	22 30       	cpi	r18, 0x02	; 2
    12e0:	31 05       	cpc	r19, r1
    12e2:	81 f0       	breq	.+32     	; 0x1304 <DIO_SetPortDirection+0x6e>
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	83 30       	cpi	r24, 0x03	; 3
    12ea:	91 05       	cpc	r25, r1
    12ec:	81 f0       	breq	.+32     	; 0x130e <DIO_SetPortDirection+0x78>
    12ee:	15 c0       	rjmp	.+42     	; 0x131a <DIO_SetPortDirection+0x84>
			{
			case PORTA :	DDRA_register = u8_PortDirectionCopy ; 	break;
    12f0:	ea e3       	ldi	r30, 0x3A	; 58
    12f2:	f0 e0       	ldi	r31, 0x00	; 0
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	80 83       	st	Z, r24
    12f8:	10 c0       	rjmp	.+32     	; 0x131a <DIO_SetPortDirection+0x84>
			case PORTB :	DDRB_register = u8_PortDirectionCopy ;	break;
    12fa:	e7 e3       	ldi	r30, 0x37	; 55
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	80 83       	st	Z, r24
    1302:	0b c0       	rjmp	.+22     	; 0x131a <DIO_SetPortDirection+0x84>
			case PORTC :	DDRC_register = u8_PortDirectionCopy ;	break;
    1304:	e4 e3       	ldi	r30, 0x34	; 52
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	80 83       	st	Z, r24
    130c:	06 c0       	rjmp	.+12     	; 0x131a <DIO_SetPortDirection+0x84>
			case PORTD : 	DDRD_register = u8_PortDirectionCopy ;	break;
    130e:	e1 e3       	ldi	r30, 0x31	; 49
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	80 83       	st	Z, r24
    1316:	01 c0       	rjmp	.+2      	; 0x131a <DIO_SetPortDirection+0x84>
			}
		}
	else
	{
		u8_ErrorState = ErrorStateNOK;
    1318:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8_ErrorState ;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <DIO_SetPortValue>:
 *to PORT_HIGH -->  0xFF - All port PINS are HIGH -
 *for any PORT from PORTA --OR--> 0 to PORTD --OR--> 3
 *Note : NOISE on non-PULLED Input PINS*/

u8 DIO_SetPortValue(u8 u8_PortIDCopy,u8 u8_PortValueCopy)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_SetPortValue+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_SetPortValue+0x8>
    1334:	0f 92       	push	r0
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	8a 83       	std	Y+2, r24	; 0x02
    133c:	6b 83       	std	Y+3, r22	; 0x03
	u8 u8_ErrorState;
	if ((u8_PortIDCopy >= PORTA) && (u8_PortIDCopy <= PORTD)&& (u8_PortValueCopy >= PORT_LOW) && (u8_PortValueCopy <= PORT_HIGH))
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	a8 f5       	brcc	.+106    	; 0x13ae <DIO_SetPortValue+0x82>
		{/*Error Check */
			u8_ErrorState = ErrorStateOK;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	89 83       	std	Y+1, r24	; 0x01
		/* Setting PORT Value*/
			switch(u8_PortIDCopy)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3d 83       	std	Y+5, r19	; 0x05
    1350:	2c 83       	std	Y+4, r18	; 0x04
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	d1 f0       	breq	.+52     	; 0x1390 <DIO_SetPortValue+0x64>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	2c f4       	brge	.+10     	; 0x1370 <DIO_SetPortValue+0x44>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	61 f0       	breq	.+24     	; 0x1386 <DIO_SetPortValue+0x5a>
    136e:	20 c0       	rjmp	.+64     	; 0x13b0 <DIO_SetPortValue+0x84>
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	81 f0       	breq	.+32     	; 0x139a <DIO_SetPortValue+0x6e>
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	91 05       	cpc	r25, r1
    1382:	81 f0       	breq	.+32     	; 0x13a4 <DIO_SetPortValue+0x78>
    1384:	15 c0       	rjmp	.+42     	; 0x13b0 <DIO_SetPortValue+0x84>
			{
			case PORTA :	PORTA_register = u8_PortValueCopy ; 	break;
    1386:	eb e3       	ldi	r30, 0x3B	; 59
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	80 83       	st	Z, r24
    138e:	10 c0       	rjmp	.+32     	; 0x13b0 <DIO_SetPortValue+0x84>
			case PORTB :	PORTB_register = u8_PortValueCopy ;		break;
    1390:	e8 e3       	ldi	r30, 0x38	; 56
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	80 83       	st	Z, r24
    1398:	0b c0       	rjmp	.+22     	; 0x13b0 <DIO_SetPortValue+0x84>
			case PORTC :	PORTC_register = u8_PortValueCopy ;		break;
    139a:	e5 e3       	ldi	r30, 0x35	; 53
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	80 83       	st	Z, r24
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <DIO_SetPortValue+0x84>
			case PORTD : 	PORTD_register = u8_PortValueCopy ;		break;
    13a4:	e2 e3       	ldi	r30, 0x32	; 50
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	80 83       	st	Z, r24
    13ac:	01 c0       	rjmp	.+2      	; 0x13b0 <DIO_SetPortValue+0x84>
			}
		}
	else
	{
		u8_ErrorState = ErrorStateNOK;
    13ae:	19 82       	std	Y+1, r1	; 0x01
	}

	return u8_ErrorState ;
    13b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    13b2:	0f 90       	pop	r0
    13b4:	0f 90       	pop	r0
    13b6:	0f 90       	pop	r0
    13b8:	0f 90       	pop	r0
    13ba:	0f 90       	pop	r0
    13bc:	cf 91       	pop	r28
    13be:	df 91       	pop	r29
    13c0:	08 95       	ret

000013c2 <SET_INT_VEC_TO_ISR>:
static void (* ADC_INT)			(void) = NULL;
static void (* SPI_INT)			(void) = NULL;
static void (*EE_RDY_INT)		(void ) = NULL ;

u8 SET_INT_VEC_TO_ISR(u8 u8_INT_VEC_NAME , void (*FUNC_PTR)(void))
{
    13c2:	df 93       	push	r29
    13c4:	cf 93       	push	r28
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <SET_INT_VEC_TO_ISR+0x6>
    13c8:	00 d0       	rcall	.+0      	; 0x13ca <SET_INT_VEC_TO_ISR+0x8>
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <SET_INT_VEC_TO_ISR+0xa>
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	7c 83       	std	Y+4, r23	; 0x04
    13d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 ErrorState;

	if((u8_INT_VEC_NAME >= 1)&&(u8_INT_VEC_NAME <=20)&&(FUNC_PTR != NULL))
    13d6:	8a 81       	ldd	r24, Y+2	; 0x02
    13d8:	88 23       	and	r24, r24
    13da:	09 f4       	brne	.+2      	; 0x13de <SET_INT_VEC_TO_ISR+0x1c>
    13dc:	fa c0       	rjmp	.+500    	; 0x15d2 <SET_INT_VEC_TO_ISR+0x210>
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	85 31       	cpi	r24, 0x15	; 21
    13e2:	08 f0       	brcs	.+2      	; 0x13e6 <SET_INT_VEC_TO_ISR+0x24>
    13e4:	f6 c0       	rjmp	.+492    	; 0x15d2 <SET_INT_VEC_TO_ISR+0x210>
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <SET_INT_VEC_TO_ISR+0x2e>
    13ee:	f1 c0       	rjmp	.+482    	; 0x15d2 <SET_INT_VEC_TO_ISR+0x210>
	{
		ErrorState = ErrorStateOK ;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	89 83       	std	Y+1, r24	; 0x01

		switch ( u8_INT_VEC_NAME)
    13f4:	8a 81       	ldd	r24, Y+2	; 0x02
    13f6:	28 2f       	mov	r18, r24
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	3e 83       	std	Y+6, r19	; 0x06
    13fc:	2d 83       	std	Y+5, r18	; 0x05
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	9e 81       	ldd	r25, Y+6	; 0x06
    1402:	89 30       	cpi	r24, 0x09	; 9
    1404:	91 05       	cpc	r25, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <SET_INT_VEC_TO_ISR+0x48>
    1408:	a5 c0       	rjmp	.+330    	; 0x1554 <SET_INT_VEC_TO_ISR+0x192>
    140a:	2d 81       	ldd	r18, Y+5	; 0x05
    140c:	3e 81       	ldd	r19, Y+6	; 0x06
    140e:	2a 30       	cpi	r18, 0x0A	; 10
    1410:	31 05       	cpc	r19, r1
    1412:	bc f5       	brge	.+110    	; 0x1482 <SET_INT_VEC_TO_ISR+0xc0>
    1414:	8d 81       	ldd	r24, Y+5	; 0x05
    1416:	9e 81       	ldd	r25, Y+6	; 0x06
    1418:	84 30       	cpi	r24, 0x04	; 4
    141a:	91 05       	cpc	r25, r1
    141c:	09 f4       	brne	.+2      	; 0x1420 <SET_INT_VEC_TO_ISR+0x5e>
    141e:	77 c0       	rjmp	.+238    	; 0x150e <SET_INT_VEC_TO_ISR+0x14c>
    1420:	2d 81       	ldd	r18, Y+5	; 0x05
    1422:	3e 81       	ldd	r19, Y+6	; 0x06
    1424:	25 30       	cpi	r18, 0x05	; 5
    1426:	31 05       	cpc	r19, r1
    1428:	9c f4       	brge	.+38     	; 0x1450 <SET_INT_VEC_TO_ISR+0x8e>
    142a:	8d 81       	ldd	r24, Y+5	; 0x05
    142c:	9e 81       	ldd	r25, Y+6	; 0x06
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	09 f4       	brne	.+2      	; 0x1436 <SET_INT_VEC_TO_ISR+0x74>
    1434:	5e c0       	rjmp	.+188    	; 0x14f2 <SET_INT_VEC_TO_ISR+0x130>
    1436:	2d 81       	ldd	r18, Y+5	; 0x05
    1438:	3e 81       	ldd	r19, Y+6	; 0x06
    143a:	23 30       	cpi	r18, 0x03	; 3
    143c:	31 05       	cpc	r19, r1
    143e:	0c f0       	brlt	.+2      	; 0x1442 <SET_INT_VEC_TO_ISR+0x80>
    1440:	5f c0       	rjmp	.+190    	; 0x1500 <SET_INT_VEC_TO_ISR+0x13e>
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	91 05       	cpc	r25, r1
    144a:	09 f4       	brne	.+2      	; 0x144e <SET_INT_VEC_TO_ISR+0x8c>
    144c:	4b c0       	rjmp	.+150    	; 0x14e4 <SET_INT_VEC_TO_ISR+0x122>
    144e:	c2 c0       	rjmp	.+388    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
    1450:	2d 81       	ldd	r18, Y+5	; 0x05
    1452:	3e 81       	ldd	r19, Y+6	; 0x06
    1454:	26 30       	cpi	r18, 0x06	; 6
    1456:	31 05       	cpc	r19, r1
    1458:	09 f4       	brne	.+2      	; 0x145c <SET_INT_VEC_TO_ISR+0x9a>
    145a:	67 c0       	rjmp	.+206    	; 0x152a <SET_INT_VEC_TO_ISR+0x168>
    145c:	8d 81       	ldd	r24, Y+5	; 0x05
    145e:	9e 81       	ldd	r25, Y+6	; 0x06
    1460:	86 30       	cpi	r24, 0x06	; 6
    1462:	91 05       	cpc	r25, r1
    1464:	0c f4       	brge	.+2      	; 0x1468 <SET_INT_VEC_TO_ISR+0xa6>
    1466:	5a c0       	rjmp	.+180    	; 0x151c <SET_INT_VEC_TO_ISR+0x15a>
    1468:	2d 81       	ldd	r18, Y+5	; 0x05
    146a:	3e 81       	ldd	r19, Y+6	; 0x06
    146c:	27 30       	cpi	r18, 0x07	; 7
    146e:	31 05       	cpc	r19, r1
    1470:	09 f4       	brne	.+2      	; 0x1474 <SET_INT_VEC_TO_ISR+0xb2>
    1472:	62 c0       	rjmp	.+196    	; 0x1538 <SET_INT_VEC_TO_ISR+0x176>
    1474:	8d 81       	ldd	r24, Y+5	; 0x05
    1476:	9e 81       	ldd	r25, Y+6	; 0x06
    1478:	88 30       	cpi	r24, 0x08	; 8
    147a:	91 05       	cpc	r25, r1
    147c:	09 f4       	brne	.+2      	; 0x1480 <SET_INT_VEC_TO_ISR+0xbe>
    147e:	63 c0       	rjmp	.+198    	; 0x1546 <SET_INT_VEC_TO_ISR+0x184>
    1480:	a9 c0       	rjmp	.+338    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
    1482:	2d 81       	ldd	r18, Y+5	; 0x05
    1484:	3e 81       	ldd	r19, Y+6	; 0x06
    1486:	2d 30       	cpi	r18, 0x0D	; 13
    1488:	31 05       	cpc	r19, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <SET_INT_VEC_TO_ISR+0xcc>
    148c:	7f c0       	rjmp	.+254    	; 0x158c <SET_INT_VEC_TO_ISR+0x1ca>
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	8e 30       	cpi	r24, 0x0E	; 14
    1494:	91 05       	cpc	r25, r1
    1496:	6c f4       	brge	.+26     	; 0x14b2 <SET_INT_VEC_TO_ISR+0xf0>
    1498:	2d 81       	ldd	r18, Y+5	; 0x05
    149a:	3e 81       	ldd	r19, Y+6	; 0x06
    149c:	2b 30       	cpi	r18, 0x0B	; 11
    149e:	31 05       	cpc	r19, r1
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <SET_INT_VEC_TO_ISR+0xe2>
    14a2:	66 c0       	rjmp	.+204    	; 0x1570 <SET_INT_VEC_TO_ISR+0x1ae>
    14a4:	8d 81       	ldd	r24, Y+5	; 0x05
    14a6:	9e 81       	ldd	r25, Y+6	; 0x06
    14a8:	8c 30       	cpi	r24, 0x0C	; 12
    14aa:	91 05       	cpc	r25, r1
    14ac:	0c f0       	brlt	.+2      	; 0x14b0 <SET_INT_VEC_TO_ISR+0xee>
    14ae:	67 c0       	rjmp	.+206    	; 0x157e <SET_INT_VEC_TO_ISR+0x1bc>
    14b0:	58 c0       	rjmp	.+176    	; 0x1562 <SET_INT_VEC_TO_ISR+0x1a0>
    14b2:	2d 81       	ldd	r18, Y+5	; 0x05
    14b4:	3e 81       	ldd	r19, Y+6	; 0x06
    14b6:	2f 30       	cpi	r18, 0x0F	; 15
    14b8:	31 05       	cpc	r19, r1
    14ba:	09 f4       	brne	.+2      	; 0x14be <SET_INT_VEC_TO_ISR+0xfc>
    14bc:	75 c0       	rjmp	.+234    	; 0x15a8 <SET_INT_VEC_TO_ISR+0x1e6>
    14be:	8d 81       	ldd	r24, Y+5	; 0x05
    14c0:	9e 81       	ldd	r25, Y+6	; 0x06
    14c2:	8f 30       	cpi	r24, 0x0F	; 15
    14c4:	91 05       	cpc	r25, r1
    14c6:	0c f4       	brge	.+2      	; 0x14ca <SET_INT_VEC_TO_ISR+0x108>
    14c8:	68 c0       	rjmp	.+208    	; 0x159a <SET_INT_VEC_TO_ISR+0x1d8>
    14ca:	2d 81       	ldd	r18, Y+5	; 0x05
    14cc:	3e 81       	ldd	r19, Y+6	; 0x06
    14ce:	20 31       	cpi	r18, 0x10	; 16
    14d0:	31 05       	cpc	r19, r1
    14d2:	09 f4       	brne	.+2      	; 0x14d6 <SET_INT_VEC_TO_ISR+0x114>
    14d4:	70 c0       	rjmp	.+224    	; 0x15b6 <SET_INT_VEC_TO_ISR+0x1f4>
    14d6:	8d 81       	ldd	r24, Y+5	; 0x05
    14d8:	9e 81       	ldd	r25, Y+6	; 0x06
    14da:	81 31       	cpi	r24, 0x11	; 17
    14dc:	91 05       	cpc	r25, r1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <SET_INT_VEC_TO_ISR+0x120>
    14e0:	71 c0       	rjmp	.+226    	; 0x15c4 <SET_INT_VEC_TO_ISR+0x202>
    14e2:	78 c0       	rjmp	.+240    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
		{
			case EXT_INT0_VEC:			EXT_INT[0] 	= FUNC_PTR;		break ;
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	90 93 69 00 	sts	0x0069, r25
    14ec:	80 93 68 00 	sts	0x0068, r24
    14f0:	71 c0       	rjmp	.+226    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case EXT_INT1_VEC:			EXT_INT[1] 	= FUNC_PTR;		break ;
    14f2:	8b 81       	ldd	r24, Y+3	; 0x03
    14f4:	9c 81       	ldd	r25, Y+4	; 0x04
    14f6:	90 93 6b 00 	sts	0x006B, r25
    14fa:	80 93 6a 00 	sts	0x006A, r24
    14fe:	6a c0       	rjmp	.+212    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case EXT_INT2_VEC:			EXT_INT[2] 	= FUNC_PTR;		break ;
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	90 93 6d 00 	sts	0x006D, r25
    1508:	80 93 6c 00 	sts	0x006C, r24
    150c:	63 c0       	rjmp	.+198    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>

			case TIMER2_CMP_VEC:		TIM2[0]	   	= FUNC_PTR;		break ;
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	90 93 6f 00 	sts	0x006F, r25
    1516:	80 93 6e 00 	sts	0x006E, r24
    151a:	5c c0       	rjmp	.+184    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case TIMER2_OVF_VEC:		TIM2[1]    	= FUNC_PTR;		break ;
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	90 93 71 00 	sts	0x0071, r25
    1524:	80 93 70 00 	sts	0x0070, r24
    1528:	55 c0       	rjmp	.+170    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>

			case TIMER1_IN_CAP_VEC:		TIM1[0] 	= FUNC_PTR;		break ;
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	90 93 73 00 	sts	0x0073, r25
    1532:	80 93 72 00 	sts	0x0072, r24
    1536:	4e c0       	rjmp	.+156    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case TIMER1_CMPA_VEC:		TIM1[1] 	= FUNC_PTR;		break ;
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	9c 81       	ldd	r25, Y+4	; 0x04
    153c:	90 93 75 00 	sts	0x0075, r25
    1540:	80 93 74 00 	sts	0x0074, r24
    1544:	47 c0       	rjmp	.+142    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case TIMER1_CMPB_VEC:		TIM1[2] 	= FUNC_PTR;		break ;
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	90 93 77 00 	sts	0x0077, r25
    154e:	80 93 76 00 	sts	0x0076, r24
    1552:	40 c0       	rjmp	.+128    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case TIMER1_OVF_VEC:		TIM1[3] 	= FUNC_PTR;		break ;
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	90 93 79 00 	sts	0x0079, r25
    155c:	80 93 78 00 	sts	0x0078, r24
    1560:	39 c0       	rjmp	.+114    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>

			case TIMER0_CMP_VEC:		TIM0[0] 	= FUNC_PTR;		break ;
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	90 93 7b 00 	sts	0x007B, r25
    156a:	80 93 7a 00 	sts	0x007A, r24
    156e:	32 c0       	rjmp	.+100    	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case TIMER0_OVF_VEC:		TIM0[1] 	= FUNC_PTR; 	break ;
    1570:	8b 81       	ldd	r24, Y+3	; 0x03
    1572:	9c 81       	ldd	r25, Y+4	; 0x04
    1574:	90 93 7d 00 	sts	0x007D, r25
    1578:	80 93 7c 00 	sts	0x007C, r24
    157c:	2b c0       	rjmp	.+86     	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>

			case SPI_STC_VEC:			SPI_INT 	= FUNC_PTR;		break ;
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	90 93 87 00 	sts	0x0087, r25
    1586:	80 93 86 00 	sts	0x0086, r24
    158a:	24 c0       	rjmp	.+72     	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>

			case UART_RXC_VEC:			UART_INT[0] = FUNC_PTR;		break ;
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	90 93 7f 00 	sts	0x007F, r25
    1594:	80 93 7e 00 	sts	0x007E, r24
    1598:	1d c0       	rjmp	.+58     	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case UART_UDRE_VEC:			UART_INT[1] = FUNC_PTR;		break ;
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	90 93 81 00 	sts	0x0081, r25
    15a2:	80 93 80 00 	sts	0x0080, r24
    15a6:	16 c0       	rjmp	.+44     	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>
			case UART_TXC_VEC:			UART_INT[2] = FUNC_PTR;		break ;
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	9c 81       	ldd	r25, Y+4	; 0x04
    15ac:	90 93 83 00 	sts	0x0083, r25
    15b0:	80 93 82 00 	sts	0x0082, r24
    15b4:	0f c0       	rjmp	.+30     	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>

			case ADC_VEC:				ADC_INT	    = FUNC_PTR;		break ;
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	90 93 85 00 	sts	0x0085, r25
    15be:	80 93 84 00 	sts	0x0084, r24
    15c2:	08 c0       	rjmp	.+16     	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>


			case EE_RDY_VEC:			EE_RDY_INT  = FUNC_PTR;		break ;
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	90 93 89 00 	sts	0x0089, r25
    15cc:	80 93 88 00 	sts	0x0088, r24
    15d0:	01 c0       	rjmp	.+2      	; 0x15d4 <SET_INT_VEC_TO_ISR+0x212>

		}
	}
	else
	{
		ErrorState = ErrorStateNOK;
    15d2:	19 82       	std	Y+1, r1	; 0x01
	}

	return ErrorState;
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d6:	26 96       	adiw	r28, 0x06	; 6
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	de bf       	out	0x3e, r29	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	cd bf       	out	0x3d, r28	; 61
    15e2:	cf 91       	pop	r28
    15e4:	df 91       	pop	r29
    15e6:	08 95       	ret

000015e8 <EN_GlobalInterrupt>:

void EN_GlobalInterrupt (void )
{
    15e8:	df 93       	push	r29
    15ea:	cf 93       	push	r28
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62

	SREG_register |= 1 << I_BIT;
    15f0:	af e5       	ldi	r26, 0x5F	; 95
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	ef e5       	ldi	r30, 0x5F	; 95
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	80 68       	ori	r24, 0x80	; 128
    15fc:	8c 93       	st	X, r24



}
    15fe:	cf 91       	pop	r28
    1600:	df 91       	pop	r29
    1602:	08 95       	ret

00001604 <DIS_GlobalInterrupt>:
void DIS_GlobalInterrupt(void)
{
    1604:	df 93       	push	r29
    1606:	cf 93       	push	r28
    1608:	cd b7       	in	r28, 0x3d	; 61
    160a:	de b7       	in	r29, 0x3e	; 62
	SREG_register &= ~(1 << I_BIT);
    160c:	af e5       	ldi	r26, 0x5F	; 95
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	ef e5       	ldi	r30, 0x5F	; 95
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	8f 77       	andi	r24, 0x7F	; 127
    1618:	8c 93       	st	X, r24
}
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <__vector_1>:

/*External interrupts ISR*/
ISR(EXT_INT0)			{	EXT_INT[0](); 	}
    1620:	1f 92       	push	r1
    1622:	0f 92       	push	r0
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	0f 92       	push	r0
    1628:	11 24       	eor	r1, r1
    162a:	2f 93       	push	r18
    162c:	3f 93       	push	r19
    162e:	4f 93       	push	r20
    1630:	5f 93       	push	r21
    1632:	6f 93       	push	r22
    1634:	7f 93       	push	r23
    1636:	8f 93       	push	r24
    1638:	9f 93       	push	r25
    163a:	af 93       	push	r26
    163c:	bf 93       	push	r27
    163e:	ef 93       	push	r30
    1640:	ff 93       	push	r31
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
    164a:	e0 91 68 00 	lds	r30, 0x0068
    164e:	f0 91 69 00 	lds	r31, 0x0069
    1652:	09 95       	icall
    1654:	cf 91       	pop	r28
    1656:	df 91       	pop	r29
    1658:	ff 91       	pop	r31
    165a:	ef 91       	pop	r30
    165c:	bf 91       	pop	r27
    165e:	af 91       	pop	r26
    1660:	9f 91       	pop	r25
    1662:	8f 91       	pop	r24
    1664:	7f 91       	pop	r23
    1666:	6f 91       	pop	r22
    1668:	5f 91       	pop	r21
    166a:	4f 91       	pop	r20
    166c:	3f 91       	pop	r19
    166e:	2f 91       	pop	r18
    1670:	0f 90       	pop	r0
    1672:	0f be       	out	0x3f, r0	; 63
    1674:	0f 90       	pop	r0
    1676:	1f 90       	pop	r1
    1678:	18 95       	reti

0000167a <__vector_2>:
ISR(EXT_INT1)			{	EXT_INT[1](); 	}
    167a:	1f 92       	push	r1
    167c:	0f 92       	push	r0
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	0f 92       	push	r0
    1682:	11 24       	eor	r1, r1
    1684:	2f 93       	push	r18
    1686:	3f 93       	push	r19
    1688:	4f 93       	push	r20
    168a:	5f 93       	push	r21
    168c:	6f 93       	push	r22
    168e:	7f 93       	push	r23
    1690:	8f 93       	push	r24
    1692:	9f 93       	push	r25
    1694:	af 93       	push	r26
    1696:	bf 93       	push	r27
    1698:	ef 93       	push	r30
    169a:	ff 93       	push	r31
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	cd b7       	in	r28, 0x3d	; 61
    16a2:	de b7       	in	r29, 0x3e	; 62
    16a4:	e0 91 6a 00 	lds	r30, 0x006A
    16a8:	f0 91 6b 00 	lds	r31, 0x006B
    16ac:	09 95       	icall
    16ae:	cf 91       	pop	r28
    16b0:	df 91       	pop	r29
    16b2:	ff 91       	pop	r31
    16b4:	ef 91       	pop	r30
    16b6:	bf 91       	pop	r27
    16b8:	af 91       	pop	r26
    16ba:	9f 91       	pop	r25
    16bc:	8f 91       	pop	r24
    16be:	7f 91       	pop	r23
    16c0:	6f 91       	pop	r22
    16c2:	5f 91       	pop	r21
    16c4:	4f 91       	pop	r20
    16c6:	3f 91       	pop	r19
    16c8:	2f 91       	pop	r18
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	0f 90       	pop	r0
    16d0:	1f 90       	pop	r1
    16d2:	18 95       	reti

000016d4 <__vector_3>:
ISR(EXT_INT2)			{	EXT_INT[2](); 	}
    16d4:	1f 92       	push	r1
    16d6:	0f 92       	push	r0
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	0f 92       	push	r0
    16dc:	11 24       	eor	r1, r1
    16de:	2f 93       	push	r18
    16e0:	3f 93       	push	r19
    16e2:	4f 93       	push	r20
    16e4:	5f 93       	push	r21
    16e6:	6f 93       	push	r22
    16e8:	7f 93       	push	r23
    16ea:	8f 93       	push	r24
    16ec:	9f 93       	push	r25
    16ee:	af 93       	push	r26
    16f0:	bf 93       	push	r27
    16f2:	ef 93       	push	r30
    16f4:	ff 93       	push	r31
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	cd b7       	in	r28, 0x3d	; 61
    16fc:	de b7       	in	r29, 0x3e	; 62
    16fe:	e0 91 6c 00 	lds	r30, 0x006C
    1702:	f0 91 6d 00 	lds	r31, 0x006D
    1706:	09 95       	icall
    1708:	cf 91       	pop	r28
    170a:	df 91       	pop	r29
    170c:	ff 91       	pop	r31
    170e:	ef 91       	pop	r30
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	0f 90       	pop	r0
    172a:	1f 90       	pop	r1
    172c:	18 95       	reti

0000172e <__vector_4>:

/*TIMER2 ISR*/
ISR(TIMER2_CMP)			{	TIM2[0]();		}
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	2f 93       	push	r18
    173a:	3f 93       	push	r19
    173c:	4f 93       	push	r20
    173e:	5f 93       	push	r21
    1740:	6f 93       	push	r22
    1742:	7f 93       	push	r23
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	af 93       	push	r26
    174a:	bf 93       	push	r27
    174c:	ef 93       	push	r30
    174e:	ff 93       	push	r31
    1750:	df 93       	push	r29
    1752:	cf 93       	push	r28
    1754:	cd b7       	in	r28, 0x3d	; 61
    1756:	de b7       	in	r29, 0x3e	; 62
    1758:	e0 91 6e 00 	lds	r30, 0x006E
    175c:	f0 91 6f 00 	lds	r31, 0x006F
    1760:	09 95       	icall
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	ff 91       	pop	r31
    1768:	ef 91       	pop	r30
    176a:	bf 91       	pop	r27
    176c:	af 91       	pop	r26
    176e:	9f 91       	pop	r25
    1770:	8f 91       	pop	r24
    1772:	7f 91       	pop	r23
    1774:	6f 91       	pop	r22
    1776:	5f 91       	pop	r21
    1778:	4f 91       	pop	r20
    177a:	3f 91       	pop	r19
    177c:	2f 91       	pop	r18
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0
    1784:	1f 90       	pop	r1
    1786:	18 95       	reti

00001788 <__vector_5>:
ISR(TIMER2_OVF)			{	TIM2[1]();		}
    1788:	1f 92       	push	r1
    178a:	0f 92       	push	r0
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	0f 92       	push	r0
    1790:	11 24       	eor	r1, r1
    1792:	2f 93       	push	r18
    1794:	3f 93       	push	r19
    1796:	4f 93       	push	r20
    1798:	5f 93       	push	r21
    179a:	6f 93       	push	r22
    179c:	7f 93       	push	r23
    179e:	8f 93       	push	r24
    17a0:	9f 93       	push	r25
    17a2:	af 93       	push	r26
    17a4:	bf 93       	push	r27
    17a6:	ef 93       	push	r30
    17a8:	ff 93       	push	r31
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	e0 91 70 00 	lds	r30, 0x0070
    17b6:	f0 91 71 00 	lds	r31, 0x0071
    17ba:	09 95       	icall
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	ff 91       	pop	r31
    17c2:	ef 91       	pop	r30
    17c4:	bf 91       	pop	r27
    17c6:	af 91       	pop	r26
    17c8:	9f 91       	pop	r25
    17ca:	8f 91       	pop	r24
    17cc:	7f 91       	pop	r23
    17ce:	6f 91       	pop	r22
    17d0:	5f 91       	pop	r21
    17d2:	4f 91       	pop	r20
    17d4:	3f 91       	pop	r19
    17d6:	2f 91       	pop	r18
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	0f 90       	pop	r0
    17de:	1f 90       	pop	r1
    17e0:	18 95       	reti

000017e2 <__vector_6>:

/*TIMER1 ISR*/
ISR(TIMER1_IN_CAP)		{	TIM1[0]();		}
    17e2:	1f 92       	push	r1
    17e4:	0f 92       	push	r0
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	0f 92       	push	r0
    17ea:	11 24       	eor	r1, r1
    17ec:	2f 93       	push	r18
    17ee:	3f 93       	push	r19
    17f0:	4f 93       	push	r20
    17f2:	5f 93       	push	r21
    17f4:	6f 93       	push	r22
    17f6:	7f 93       	push	r23
    17f8:	8f 93       	push	r24
    17fa:	9f 93       	push	r25
    17fc:	af 93       	push	r26
    17fe:	bf 93       	push	r27
    1800:	ef 93       	push	r30
    1802:	ff 93       	push	r31
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	cd b7       	in	r28, 0x3d	; 61
    180a:	de b7       	in	r29, 0x3e	; 62
    180c:	e0 91 72 00 	lds	r30, 0x0072
    1810:	f0 91 73 00 	lds	r31, 0x0073
    1814:	09 95       	icall
    1816:	cf 91       	pop	r28
    1818:	df 91       	pop	r29
    181a:	ff 91       	pop	r31
    181c:	ef 91       	pop	r30
    181e:	bf 91       	pop	r27
    1820:	af 91       	pop	r26
    1822:	9f 91       	pop	r25
    1824:	8f 91       	pop	r24
    1826:	7f 91       	pop	r23
    1828:	6f 91       	pop	r22
    182a:	5f 91       	pop	r21
    182c:	4f 91       	pop	r20
    182e:	3f 91       	pop	r19
    1830:	2f 91       	pop	r18
    1832:	0f 90       	pop	r0
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	0f 90       	pop	r0
    1838:	1f 90       	pop	r1
    183a:	18 95       	reti

0000183c <__vector_7>:
ISR(TIMER1_CMPA)		{	TIM1[1]();		}
    183c:	1f 92       	push	r1
    183e:	0f 92       	push	r0
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	0f 92       	push	r0
    1844:	11 24       	eor	r1, r1
    1846:	2f 93       	push	r18
    1848:	3f 93       	push	r19
    184a:	4f 93       	push	r20
    184c:	5f 93       	push	r21
    184e:	6f 93       	push	r22
    1850:	7f 93       	push	r23
    1852:	8f 93       	push	r24
    1854:	9f 93       	push	r25
    1856:	af 93       	push	r26
    1858:	bf 93       	push	r27
    185a:	ef 93       	push	r30
    185c:	ff 93       	push	r31
    185e:	df 93       	push	r29
    1860:	cf 93       	push	r28
    1862:	cd b7       	in	r28, 0x3d	; 61
    1864:	de b7       	in	r29, 0x3e	; 62
    1866:	e0 91 74 00 	lds	r30, 0x0074
    186a:	f0 91 75 00 	lds	r31, 0x0075
    186e:	09 95       	icall
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	ff 91       	pop	r31
    1876:	ef 91       	pop	r30
    1878:	bf 91       	pop	r27
    187a:	af 91       	pop	r26
    187c:	9f 91       	pop	r25
    187e:	8f 91       	pop	r24
    1880:	7f 91       	pop	r23
    1882:	6f 91       	pop	r22
    1884:	5f 91       	pop	r21
    1886:	4f 91       	pop	r20
    1888:	3f 91       	pop	r19
    188a:	2f 91       	pop	r18
    188c:	0f 90       	pop	r0
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	0f 90       	pop	r0
    1892:	1f 90       	pop	r1
    1894:	18 95       	reti

00001896 <__vector_8>:
ISR(TIMER1_CMPB)		{	TIM1[2]();		}
    1896:	1f 92       	push	r1
    1898:	0f 92       	push	r0
    189a:	0f b6       	in	r0, 0x3f	; 63
    189c:	0f 92       	push	r0
    189e:	11 24       	eor	r1, r1
    18a0:	2f 93       	push	r18
    18a2:	3f 93       	push	r19
    18a4:	4f 93       	push	r20
    18a6:	5f 93       	push	r21
    18a8:	6f 93       	push	r22
    18aa:	7f 93       	push	r23
    18ac:	8f 93       	push	r24
    18ae:	9f 93       	push	r25
    18b0:	af 93       	push	r26
    18b2:	bf 93       	push	r27
    18b4:	ef 93       	push	r30
    18b6:	ff 93       	push	r31
    18b8:	df 93       	push	r29
    18ba:	cf 93       	push	r28
    18bc:	cd b7       	in	r28, 0x3d	; 61
    18be:	de b7       	in	r29, 0x3e	; 62
    18c0:	e0 91 76 00 	lds	r30, 0x0076
    18c4:	f0 91 77 00 	lds	r31, 0x0077
    18c8:	09 95       	icall
    18ca:	cf 91       	pop	r28
    18cc:	df 91       	pop	r29
    18ce:	ff 91       	pop	r31
    18d0:	ef 91       	pop	r30
    18d2:	bf 91       	pop	r27
    18d4:	af 91       	pop	r26
    18d6:	9f 91       	pop	r25
    18d8:	8f 91       	pop	r24
    18da:	7f 91       	pop	r23
    18dc:	6f 91       	pop	r22
    18de:	5f 91       	pop	r21
    18e0:	4f 91       	pop	r20
    18e2:	3f 91       	pop	r19
    18e4:	2f 91       	pop	r18
    18e6:	0f 90       	pop	r0
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	0f 90       	pop	r0
    18ec:	1f 90       	pop	r1
    18ee:	18 95       	reti

000018f0 <__vector_9>:
ISR(TIMER1_OVF)			{	TIM1[3]();		}
    18f0:	1f 92       	push	r1
    18f2:	0f 92       	push	r0
    18f4:	0f b6       	in	r0, 0x3f	; 63
    18f6:	0f 92       	push	r0
    18f8:	11 24       	eor	r1, r1
    18fa:	2f 93       	push	r18
    18fc:	3f 93       	push	r19
    18fe:	4f 93       	push	r20
    1900:	5f 93       	push	r21
    1902:	6f 93       	push	r22
    1904:	7f 93       	push	r23
    1906:	8f 93       	push	r24
    1908:	9f 93       	push	r25
    190a:	af 93       	push	r26
    190c:	bf 93       	push	r27
    190e:	ef 93       	push	r30
    1910:	ff 93       	push	r31
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	e0 91 78 00 	lds	r30, 0x0078
    191e:	f0 91 79 00 	lds	r31, 0x0079
    1922:	09 95       	icall
    1924:	cf 91       	pop	r28
    1926:	df 91       	pop	r29
    1928:	ff 91       	pop	r31
    192a:	ef 91       	pop	r30
    192c:	bf 91       	pop	r27
    192e:	af 91       	pop	r26
    1930:	9f 91       	pop	r25
    1932:	8f 91       	pop	r24
    1934:	7f 91       	pop	r23
    1936:	6f 91       	pop	r22
    1938:	5f 91       	pop	r21
    193a:	4f 91       	pop	r20
    193c:	3f 91       	pop	r19
    193e:	2f 91       	pop	r18
    1940:	0f 90       	pop	r0
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	0f 90       	pop	r0
    1946:	1f 90       	pop	r1
    1948:	18 95       	reti

0000194a <__vector_10>:

/*TIMER0 ISR*/
ISR(TIMER0_CMP)			{	TIM0[0]();		}
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	2f 93       	push	r18
    1956:	3f 93       	push	r19
    1958:	4f 93       	push	r20
    195a:	5f 93       	push	r21
    195c:	6f 93       	push	r22
    195e:	7f 93       	push	r23
    1960:	8f 93       	push	r24
    1962:	9f 93       	push	r25
    1964:	af 93       	push	r26
    1966:	bf 93       	push	r27
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
    1974:	e0 91 7a 00 	lds	r30, 0x007A
    1978:	f0 91 7b 00 	lds	r31, 0x007B
    197c:	09 95       	icall
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	ff 91       	pop	r31
    1984:	ef 91       	pop	r30
    1986:	bf 91       	pop	r27
    1988:	af 91       	pop	r26
    198a:	9f 91       	pop	r25
    198c:	8f 91       	pop	r24
    198e:	7f 91       	pop	r23
    1990:	6f 91       	pop	r22
    1992:	5f 91       	pop	r21
    1994:	4f 91       	pop	r20
    1996:	3f 91       	pop	r19
    1998:	2f 91       	pop	r18
    199a:	0f 90       	pop	r0
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	0f 90       	pop	r0
    19a0:	1f 90       	pop	r1
    19a2:	18 95       	reti

000019a4 <__vector_11>:
ISR(TIMER0_OVF)			{	TIM0[1]();		}
    19a4:	1f 92       	push	r1
    19a6:	0f 92       	push	r0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	2f 93       	push	r18
    19b0:	3f 93       	push	r19
    19b2:	4f 93       	push	r20
    19b4:	5f 93       	push	r21
    19b6:	6f 93       	push	r22
    19b8:	7f 93       	push	r23
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	af 93       	push	r26
    19c0:	bf 93       	push	r27
    19c2:	ef 93       	push	r30
    19c4:	ff 93       	push	r31
    19c6:	df 93       	push	r29
    19c8:	cf 93       	push	r28
    19ca:	cd b7       	in	r28, 0x3d	; 61
    19cc:	de b7       	in	r29, 0x3e	; 62
    19ce:	e0 91 7c 00 	lds	r30, 0x007C
    19d2:	f0 91 7d 00 	lds	r31, 0x007D
    19d6:	09 95       	icall
    19d8:	cf 91       	pop	r28
    19da:	df 91       	pop	r29
    19dc:	ff 91       	pop	r31
    19de:	ef 91       	pop	r30
    19e0:	bf 91       	pop	r27
    19e2:	af 91       	pop	r26
    19e4:	9f 91       	pop	r25
    19e6:	8f 91       	pop	r24
    19e8:	7f 91       	pop	r23
    19ea:	6f 91       	pop	r22
    19ec:	5f 91       	pop	r21
    19ee:	4f 91       	pop	r20
    19f0:	3f 91       	pop	r19
    19f2:	2f 91       	pop	r18
    19f4:	0f 90       	pop	r0
    19f6:	0f be       	out	0x3f, r0	; 63
    19f8:	0f 90       	pop	r0
    19fa:	1f 90       	pop	r1
    19fc:	18 95       	reti

000019fe <__vector_12>:

/*SPI ISR*/
ISR(SPI_STC)			{	SPI_INT();		}
    19fe:	1f 92       	push	r1
    1a00:	0f 92       	push	r0
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	0f 92       	push	r0
    1a06:	11 24       	eor	r1, r1
    1a08:	2f 93       	push	r18
    1a0a:	3f 93       	push	r19
    1a0c:	4f 93       	push	r20
    1a0e:	5f 93       	push	r21
    1a10:	6f 93       	push	r22
    1a12:	7f 93       	push	r23
    1a14:	8f 93       	push	r24
    1a16:	9f 93       	push	r25
    1a18:	af 93       	push	r26
    1a1a:	bf 93       	push	r27
    1a1c:	ef 93       	push	r30
    1a1e:	ff 93       	push	r31
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	e0 91 86 00 	lds	r30, 0x0086
    1a2c:	f0 91 87 00 	lds	r31, 0x0087
    1a30:	09 95       	icall
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	ff 91       	pop	r31
    1a38:	ef 91       	pop	r30
    1a3a:	bf 91       	pop	r27
    1a3c:	af 91       	pop	r26
    1a3e:	9f 91       	pop	r25
    1a40:	8f 91       	pop	r24
    1a42:	7f 91       	pop	r23
    1a44:	6f 91       	pop	r22
    1a46:	5f 91       	pop	r21
    1a48:	4f 91       	pop	r20
    1a4a:	3f 91       	pop	r19
    1a4c:	2f 91       	pop	r18
    1a4e:	0f 90       	pop	r0
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	0f 90       	pop	r0
    1a54:	1f 90       	pop	r1
    1a56:	18 95       	reti

00001a58 <__vector_13>:

/*UART ISR*/
ISR(UART_RXC)			{	UART_INT[0]();	}
    1a58:	1f 92       	push	r1
    1a5a:	0f 92       	push	r0
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	0f 92       	push	r0
    1a60:	11 24       	eor	r1, r1
    1a62:	2f 93       	push	r18
    1a64:	3f 93       	push	r19
    1a66:	4f 93       	push	r20
    1a68:	5f 93       	push	r21
    1a6a:	6f 93       	push	r22
    1a6c:	7f 93       	push	r23
    1a6e:	8f 93       	push	r24
    1a70:	9f 93       	push	r25
    1a72:	af 93       	push	r26
    1a74:	bf 93       	push	r27
    1a76:	ef 93       	push	r30
    1a78:	ff 93       	push	r31
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	cd b7       	in	r28, 0x3d	; 61
    1a80:	de b7       	in	r29, 0x3e	; 62
    1a82:	e0 91 7e 00 	lds	r30, 0x007E
    1a86:	f0 91 7f 00 	lds	r31, 0x007F
    1a8a:	09 95       	icall
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <__vector_14>:
ISR(UART_UDRE)			{	UART_INT[1]();	}
    1ab2:	1f 92       	push	r1
    1ab4:	0f 92       	push	r0
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	0f 92       	push	r0
    1aba:	11 24       	eor	r1, r1
    1abc:	2f 93       	push	r18
    1abe:	3f 93       	push	r19
    1ac0:	4f 93       	push	r20
    1ac2:	5f 93       	push	r21
    1ac4:	6f 93       	push	r22
    1ac6:	7f 93       	push	r23
    1ac8:	8f 93       	push	r24
    1aca:	9f 93       	push	r25
    1acc:	af 93       	push	r26
    1ace:	bf 93       	push	r27
    1ad0:	ef 93       	push	r30
    1ad2:	ff 93       	push	r31
    1ad4:	df 93       	push	r29
    1ad6:	cf 93       	push	r28
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	e0 91 80 00 	lds	r30, 0x0080
    1ae0:	f0 91 81 00 	lds	r31, 0x0081
    1ae4:	09 95       	icall
    1ae6:	cf 91       	pop	r28
    1ae8:	df 91       	pop	r29
    1aea:	ff 91       	pop	r31
    1aec:	ef 91       	pop	r30
    1aee:	bf 91       	pop	r27
    1af0:	af 91       	pop	r26
    1af2:	9f 91       	pop	r25
    1af4:	8f 91       	pop	r24
    1af6:	7f 91       	pop	r23
    1af8:	6f 91       	pop	r22
    1afa:	5f 91       	pop	r21
    1afc:	4f 91       	pop	r20
    1afe:	3f 91       	pop	r19
    1b00:	2f 91       	pop	r18
    1b02:	0f 90       	pop	r0
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	0f 90       	pop	r0
    1b08:	1f 90       	pop	r1
    1b0a:	18 95       	reti

00001b0c <__vector_15>:
ISR(UART_TXC)			{	UART_INT[2]();	}
    1b0c:	1f 92       	push	r1
    1b0e:	0f 92       	push	r0
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	0f 92       	push	r0
    1b14:	11 24       	eor	r1, r1
    1b16:	2f 93       	push	r18
    1b18:	3f 93       	push	r19
    1b1a:	4f 93       	push	r20
    1b1c:	5f 93       	push	r21
    1b1e:	6f 93       	push	r22
    1b20:	7f 93       	push	r23
    1b22:	8f 93       	push	r24
    1b24:	9f 93       	push	r25
    1b26:	af 93       	push	r26
    1b28:	bf 93       	push	r27
    1b2a:	ef 93       	push	r30
    1b2c:	ff 93       	push	r31
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
    1b36:	e0 91 82 00 	lds	r30, 0x0082
    1b3a:	f0 91 83 00 	lds	r31, 0x0083
    1b3e:	09 95       	icall
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	ff 91       	pop	r31
    1b46:	ef 91       	pop	r30
    1b48:	bf 91       	pop	r27
    1b4a:	af 91       	pop	r26
    1b4c:	9f 91       	pop	r25
    1b4e:	8f 91       	pop	r24
    1b50:	7f 91       	pop	r23
    1b52:	6f 91       	pop	r22
    1b54:	5f 91       	pop	r21
    1b56:	4f 91       	pop	r20
    1b58:	3f 91       	pop	r19
    1b5a:	2f 91       	pop	r18
    1b5c:	0f 90       	pop	r0
    1b5e:	0f be       	out	0x3f, r0	; 63
    1b60:	0f 90       	pop	r0
    1b62:	1f 90       	pop	r1
    1b64:	18 95       	reti

00001b66 <__vector_16>:

/*ADC ISR*/
ISR(ADC)				{	ADC_INT();		}
    1b66:	1f 92       	push	r1
    1b68:	0f 92       	push	r0
    1b6a:	0f b6       	in	r0, 0x3f	; 63
    1b6c:	0f 92       	push	r0
    1b6e:	11 24       	eor	r1, r1
    1b70:	2f 93       	push	r18
    1b72:	3f 93       	push	r19
    1b74:	4f 93       	push	r20
    1b76:	5f 93       	push	r21
    1b78:	6f 93       	push	r22
    1b7a:	7f 93       	push	r23
    1b7c:	8f 93       	push	r24
    1b7e:	9f 93       	push	r25
    1b80:	af 93       	push	r26
    1b82:	bf 93       	push	r27
    1b84:	ef 93       	push	r30
    1b86:	ff 93       	push	r31
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	e0 91 84 00 	lds	r30, 0x0084
    1b94:	f0 91 85 00 	lds	r31, 0x0085
    1b98:	09 95       	icall
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	ff 91       	pop	r31
    1ba0:	ef 91       	pop	r30
    1ba2:	bf 91       	pop	r27
    1ba4:	af 91       	pop	r26
    1ba6:	9f 91       	pop	r25
    1ba8:	8f 91       	pop	r24
    1baa:	7f 91       	pop	r23
    1bac:	6f 91       	pop	r22
    1bae:	5f 91       	pop	r21
    1bb0:	4f 91       	pop	r20
    1bb2:	3f 91       	pop	r19
    1bb4:	2f 91       	pop	r18
    1bb6:	0f 90       	pop	r0
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	0f 90       	pop	r0
    1bbc:	1f 90       	pop	r1
    1bbe:	18 95       	reti

00001bc0 <__vector_17>:

/*EEPROM ISR*/
ISR(EE_RDY)				{	EE_RDY_INT();	}
    1bc0:	1f 92       	push	r1
    1bc2:	0f 92       	push	r0
    1bc4:	0f b6       	in	r0, 0x3f	; 63
    1bc6:	0f 92       	push	r0
    1bc8:	11 24       	eor	r1, r1
    1bca:	2f 93       	push	r18
    1bcc:	3f 93       	push	r19
    1bce:	4f 93       	push	r20
    1bd0:	5f 93       	push	r21
    1bd2:	6f 93       	push	r22
    1bd4:	7f 93       	push	r23
    1bd6:	8f 93       	push	r24
    1bd8:	9f 93       	push	r25
    1bda:	af 93       	push	r26
    1bdc:	bf 93       	push	r27
    1bde:	ef 93       	push	r30
    1be0:	ff 93       	push	r31
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	e0 91 88 00 	lds	r30, 0x0088
    1bee:	f0 91 89 00 	lds	r31, 0x0089
    1bf2:	09 95       	icall
    1bf4:	cf 91       	pop	r28
    1bf6:	df 91       	pop	r29
    1bf8:	ff 91       	pop	r31
    1bfa:	ef 91       	pop	r30
    1bfc:	bf 91       	pop	r27
    1bfe:	af 91       	pop	r26
    1c00:	9f 91       	pop	r25
    1c02:	8f 91       	pop	r24
    1c04:	7f 91       	pop	r23
    1c06:	6f 91       	pop	r22
    1c08:	5f 91       	pop	r21
    1c0a:	4f 91       	pop	r20
    1c0c:	3f 91       	pop	r19
    1c0e:	2f 91       	pop	r18
    1c10:	0f 90       	pop	r0
    1c12:	0f be       	out	0x3f, r0	; 63
    1c14:	0f 90       	pop	r0
    1c16:	1f 90       	pop	r1
    1c18:	18 95       	reti

00001c1a <MAX7219_Init>:
#include"SPI_Interface.h"
#include"SPI_Config.h"
#include"MAX7219_Interface.h"
//u8 Garbage = 0;
void MAX7219_Init(void)
{
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	cd b7       	in	r28, 0x3d	; 61
    1c20:	de b7       	in	r29, 0x3e	; 62
	MAX7219_writeData(MAX7219_MODE_TEST,0x00);
    1c22:	8f e0       	ldi	r24, 0x0F	; 15
    1c24:	60 e0       	ldi	r22, 0x00	; 0
    1c26:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
	/*Decode Mode to Font Code-B*/
	MAX7219_writeData(MAX7219_MODE_DECODE,0xFF);
    1c2a:	89 e0       	ldi	r24, 0x09	; 9
    1c2c:	6f ef       	ldi	r22, 0xFF	; 255
    1c2e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
	/*Scan limit runs from 0*/
	MAX7219_writeData(MAX7219_MODE_SCAN_LIMIT,(DIG_IN_USE -1) );
    1c32:	8b e0       	ldi	r24, 0x0B	; 11
    1c34:	63 e0       	ldi	r22, 0x03	; 3
    1c36:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_INTENSITY,8);
    1c3a:	8a e0       	ldi	r24, 0x0A	; 10
    1c3c:	68 e0       	ldi	r22, 0x08	; 8
    1c3e:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
	MAX7219_writeData(MAX7219_MODE_POWER,ON);
    1c42:	8c e0       	ldi	r24, 0x0C	; 12
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>

}
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <MAX7219_Load1>:
void MAX7219_Load1(void)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB,SS_PIN,HIGH);
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	64 e0       	ldi	r22, 0x04	; 4
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>

}
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <MAX7219_Load0>:

void MAX7219_Load0(void)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	cd b7       	in	r28, 0x3d	; 61
    1c6e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinValue(PORTB,SS_PIN,LOW);
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	64 e0       	ldi	r22, 0x04	; 4
    1c74:	40 e0       	ldi	r20, 0x00	; 0
    1c76:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>

}
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	08 95       	ret

00001c80 <MAX7219_writeData>:

void MAX7219_writeData(u8 data_register, u8 data)
{
    1c80:	df 93       	push	r29
    1c82:	cf 93       	push	r28
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	60 97       	sbiw	r28, 0x10	; 16
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
    1c94:	8f 87       	std	Y+15, r24	; 0x0f
    1c96:	68 8b       	std	Y+16, r22	; 0x10
		MAX7219_Load0();
    1c98:	0e 94 34 0e 	call	0x1c68	; 0x1c68 <MAX7219_Load0>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a0 e8       	ldi	r26, 0x80	; 128
    1ca2:	bf e3       	ldi	r27, 0x3F	; 63
    1ca4:	8b 87       	std	Y+11, r24	; 0x0b
    1ca6:	9c 87       	std	Y+12, r25	; 0x0c
    1ca8:	ad 87       	std	Y+13, r26	; 0x0d
    1caa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a ef       	ldi	r20, 0xFA	; 250
    1cba:	54 e4       	ldi	r21, 0x44	; 68
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8f 83       	std	Y+7, r24	; 0x07
    1cc6:	98 87       	std	Y+8, r25	; 0x08
    1cc8:	a9 87       	std	Y+9, r26	; 0x09
    1cca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ccc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cce:	78 85       	ldd	r23, Y+8	; 0x08
    1cd0:	89 85       	ldd	r24, Y+9	; 0x09
    1cd2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <MAX7219_writeData+0x6e>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	3f c0       	rjmp	.+126    	; 0x1d6c <MAX7219_writeData+0xec>
	else if (__tmp > 65535)
    1cee:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf0:	78 85       	ldd	r23, Y+8	; 0x08
    1cf2:	89 85       	ldd	r24, Y+9	; 0x09
    1cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	4c f5       	brge	.+82     	; 0x1d58 <MAX7219_writeData+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e2       	ldi	r20, 0x20	; 32
    1d14:	51 e4       	ldi	r21, 0x41	; 65
    1d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1a:	dc 01       	movw	r26, r24
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	bc 01       	movw	r22, r24
    1d20:	cd 01       	movw	r24, r26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9e 83       	std	Y+6, r25	; 0x06
    1d2c:	8d 83       	std	Y+5, r24	; 0x05
    1d2e:	0f c0       	rjmp	.+30     	; 0x1d4e <MAX7219_writeData+0xce>
    1d30:	88 ec       	ldi	r24, 0xC8	; 200
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 83       	std	Y+4, r25	; 0x04
    1d36:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	f1 f7       	brne	.-4      	; 0x1d3c <MAX7219_writeData+0xbc>
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	9e 83       	std	Y+6, r25	; 0x06
    1d4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d50:	9e 81       	ldd	r25, Y+6	; 0x06
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	69 f7       	brne	.-38     	; 0x1d30 <MAX7219_writeData+0xb0>
    1d56:	14 c0       	rjmp	.+40     	; 0x1d80 <MAX7219_writeData+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d58:	6f 81       	ldd	r22, Y+7	; 0x07
    1d5a:	78 85       	ldd	r23, Y+8	; 0x08
    1d5c:	89 85       	ldd	r24, Y+9	; 0x09
    1d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d64:	dc 01       	movw	r26, r24
    1d66:	cb 01       	movw	r24, r22
    1d68:	9e 83       	std	Y+6, r25	; 0x06
    1d6a:	8d 83       	std	Y+5, r24	; 0x05
    1d6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d70:	9a 83       	std	Y+2, r25	; 0x02
    1d72:	89 83       	std	Y+1, r24	; 0x01
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	9a 81       	ldd	r25, Y+2	; 0x02
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <MAX7219_writeData+0xf8>
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
        // Send the register where the data will be stored
		SPI_SendByte(data_register);
    1d80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d82:	0e 94 c8 10 	call	0x2190	; 0x2190 <SPI_SendByte>
        // Send the data to be stored
		SPI_SendByte(data);
    1d86:	88 89       	ldd	r24, Y+16	; 0x10
    1d88:	0e 94 c8 10 	call	0x2190	; 0x2190 <SPI_SendByte>
        MAX7219_Load1();
    1d8c:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <MAX7219_Load1>
}
    1d90:	60 96       	adiw	r28, 0x10	; 16
    1d92:	0f b6       	in	r0, 0x3f	; 63
    1d94:	f8 94       	cli
    1d96:	de bf       	out	0x3e, r29	; 62
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	cd bf       	out	0x3d, r28	; 61
    1d9c:	cf 91       	pop	r28
    1d9e:	df 91       	pop	r29
    1da0:	08 95       	ret

00001da2 <MAX7219_clearDisplay>:

void MAX7219_clearDisplay()
{
    1da2:	df 93       	push	r29
    1da4:	cf 93       	push	r28
    1da6:	0f 92       	push	r0
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    u8 i = DIG_IN_USE;
    1dac:	84 e0       	ldi	r24, 0x04	; 4
    1dae:	89 83       	std	Y+1, r24	; 0x01
    // Loop until 0, but don't run for zero
    do {
        // Set each display in use to blank
        MAX7219_writeData(i, MAX7219_CHAR_BLANK);
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	6f e0       	ldi	r22, 0x0F	; 15
    1db4:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
    } while (--i);
    1db8:	89 81       	ldd	r24, Y+1	; 0x01
    1dba:	81 50       	subi	r24, 0x01	; 1
    1dbc:	89 83       	std	Y+1, r24	; 0x01
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	88 23       	and	r24, r24
    1dc2:	b1 f7       	brne	.-20     	; 0x1db0 <MAX7219_clearDisplay+0xe>
}
    1dc4:	0f 90       	pop	r0
    1dc6:	cf 91       	pop	r28
    1dc8:	df 91       	pop	r29
    1dca:	08 95       	ret

00001dcc <MAX7219_displayNumber>:


void MAX7219_displayNumber(volatile long number)
{
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	00 d0       	rcall	.+0      	; 0x1dd2 <MAX7219_displayNumber+0x6>
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <MAX7219_displayNumber+0x8>
    1dd4:	00 d0       	rcall	.+0      	; 0x1dd6 <MAX7219_displayNumber+0xa>
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	6b 83       	std	Y+3, r22	; 0x03
    1ddc:	7c 83       	std	Y+4, r23	; 0x04
    1dde:	8d 83       	std	Y+5, r24	; 0x05
    1de0:	9e 83       	std	Y+6, r25	; 0x06
    char negative = 0;
    1de2:	1a 82       	std	Y+2, r1	; 0x02

    // Convert negative to positive.
    // Keep a record that it was negative so we can
    // sign it again on the display.
    if (number < 0) {
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	9c 81       	ldd	r25, Y+4	; 0x04
    1de8:	ad 81       	ldd	r26, Y+5	; 0x05
    1dea:	be 81       	ldd	r27, Y+6	; 0x06
    1dec:	bb 23       	and	r27, r27
    1dee:	8c f4       	brge	.+34     	; 0x1e12 <MAX7219_displayNumber+0x46>
        negative = 1;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	8a 83       	std	Y+2, r24	; 0x02
        number *= -1;
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	ad 81       	ldd	r26, Y+5	; 0x05
    1dfa:	be 81       	ldd	r27, Y+6	; 0x06
    1dfc:	b0 95       	com	r27
    1dfe:	a0 95       	com	r26
    1e00:	90 95       	com	r25
    1e02:	81 95       	neg	r24
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	af 4f       	sbci	r26, 0xFF	; 255
    1e08:	bf 4f       	sbci	r27, 0xFF	; 255
    1e0a:	8b 83       	std	Y+3, r24	; 0x03
    1e0c:	9c 83       	std	Y+4, r25	; 0x04
    1e0e:	ad 83       	std	Y+5, r26	; 0x05
    1e10:	be 83       	std	Y+6, r27	; 0x06
    }

    MAX7219_clearDisplay();
    1e12:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <MAX7219_clearDisplay>

    // If number = 0, only show one zero then exit
    if (number == 0) {
    1e16:	8b 81       	ldd	r24, Y+3	; 0x03
    1e18:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1a:	ad 81       	ldd	r26, Y+5	; 0x05
    1e1c:	be 81       	ldd	r27, Y+6	; 0x06
    1e1e:	00 97       	sbiw	r24, 0x00	; 0
    1e20:	a1 05       	cpc	r26, r1
    1e22:	b1 05       	cpc	r27, r1
    1e24:	29 f4       	brne	.+10     	; 0x1e30 <MAX7219_displayNumber+0x64>
        MAX7219_writeData(MAX7219_DIGIT0, 0);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	60 e0       	ldi	r22, 0x00	; 0
    1e2a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
    1e2e:	38 c0       	rjmp	.+112    	; 0x1ea0 <MAX7219_displayNumber+0xd4>
        return;
    }

    // Initialization to 0 required in this case,
    // does not work without it. Not sure why.
    char i = 0;
    1e30:	19 82       	std	Y+1, r1	; 0x01

    // Loop until number is 0.
    do {
        MAX7219_writeData(++i, number % 10);
    1e32:	89 81       	ldd	r24, Y+1	; 0x01
    1e34:	8f 5f       	subi	r24, 0xFF	; 255
    1e36:	89 83       	std	Y+1, r24	; 0x01
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	ad 81       	ldd	r26, Y+5	; 0x05
    1e3e:	be 81       	ldd	r27, Y+6	; 0x06
    1e40:	2a e0       	ldi	r18, 0x0A	; 10
    1e42:	30 e0       	ldi	r19, 0x00	; 0
    1e44:	40 e0       	ldi	r20, 0x00	; 0
    1e46:	50 e0       	ldi	r21, 0x00	; 0
    1e48:	bc 01       	movw	r22, r24
    1e4a:	cd 01       	movw	r24, r26
    1e4c:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__divmodsi4>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	98 2f       	mov	r25, r24
    1e56:	89 81       	ldd	r24, Y+1	; 0x01
    1e58:	69 2f       	mov	r22, r25
    1e5a:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
        // Actually divide by 10 now.
        number /= 10;
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	9c 81       	ldd	r25, Y+4	; 0x04
    1e62:	ad 81       	ldd	r26, Y+5	; 0x05
    1e64:	be 81       	ldd	r27, Y+6	; 0x06
    1e66:	2a e0       	ldi	r18, 0x0A	; 10
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e0       	ldi	r20, 0x00	; 0
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	bc 01       	movw	r22, r24
    1e70:	cd 01       	movw	r24, r26
    1e72:	0e 94 ca 16 	call	0x2d94	; 0x2d94 <__divmodsi4>
    1e76:	da 01       	movw	r26, r20
    1e78:	c9 01       	movw	r24, r18
    1e7a:	8b 83       	std	Y+3, r24	; 0x03
    1e7c:	9c 83       	std	Y+4, r25	; 0x04
    1e7e:	ad 83       	std	Y+5, r26	; 0x05
    1e80:	be 83       	std	Y+6, r27	; 0x06
    } while (number);
    1e82:	8b 81       	ldd	r24, Y+3	; 0x03
    1e84:	9c 81       	ldd	r25, Y+4	; 0x04
    1e86:	ad 81       	ldd	r26, Y+5	; 0x05
    1e88:	be 81       	ldd	r27, Y+6	; 0x06
    1e8a:	00 97       	sbiw	r24, 0x00	; 0
    1e8c:	a1 05       	cpc	r26, r1
    1e8e:	b1 05       	cpc	r27, r1
    1e90:	81 f6       	brne	.-96     	; 0x1e32 <MAX7219_displayNumber+0x66>

    // Bear in mind that if you only have three digits, and
    // try to display something like "-256" all that will display
    // will be "256" because it needs an extra fourth digit to
    // display the sign.
    if (negative) {
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	88 23       	and	r24, r24
    1e96:	21 f0       	breq	.+8      	; 0x1ea0 <MAX7219_displayNumber+0xd4>
        MAX7219_writeData(i, MAX7219_CHAR_NEGATIVE);
    1e98:	89 81       	ldd	r24, Y+1	; 0x01
    1e9a:	6a e0       	ldi	r22, 0x0A	; 10
    1e9c:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
    }
}
    1ea0:	26 96       	adiw	r28, 0x06	; 6
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	cf 91       	pop	r28
    1eae:	df 91       	pop	r29
    1eb0:	08 95       	ret

00001eb2 <RAM_PinsInitailize>:
#include"DIO_INT.h"

#include"RAM_INT.h"

void RAM_PinsInitailize ()
{
    1eb2:	df 93       	push	r29
    1eb4:	cf 93       	push	r28
    1eb6:	cd b7       	in	r28, 0x3d	; 61
    1eb8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(RAM_ADRH_PORT,PORT_OUTPUT);//PORTD
    1eba:	83 e0       	ldi	r24, 0x03	; 3
    1ebc:	6f ef       	ldi	r22, 0xFF	; 255
    1ebe:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_SetPortDirection>
	DIO_SetPortValue(RAM_ADRH_PORT,PORT_LOW);
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	60 e0       	ldi	r22, 0x00	; 0
    1ec6:	0e 94 96 09 	call	0x132c	; 0x132c <DIO_SetPortValue>
	//DIO_SetPortDirection(RAM_ADRL_PORT,PORT_OUTPUT);//PORTD
	//DIO_SetPortValue(RAM_ADRL_PORT,PORT_LOW);
	DIO_SetPortDirection(RAM_DATA_PORT,PORT_OUTPUT);//PORTC
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	6f ef       	ldi	r22, 0xFF	; 255
    1ece:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_SetPortDirection>
	DIO_SetPortValue(RAM_DATA_PORT,PORT_LOW);
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	60 e0       	ldi	r22, 0x00	; 0
    1ed6:	0e 94 96 09 	call	0x132c	; 0x132c <DIO_SetPortValue>

	DIO_SetPinDirection(RAM_CTRL_PORT,ADR_16_PIN,OUTPUT);
    1eda:	80 e0       	ldi	r24, 0x00	; 0
    1edc:	67 e0       	ldi	r22, 0x07	; 7
    1ede:	41 e0       	ldi	r20, 0x01	; 1
    1ee0:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(RAM_CTRL_PORT,ADR_16_PIN,LOW);
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	67 e0       	ldi	r22, 0x07	; 7
    1ee8:	40 e0       	ldi	r20, 0x00	; 0
    1eea:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	DIO_SetPinDirection(RAM_CTRL_PORT,ADR_13_5_PIN,OUTPUT);
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	41 e0       	ldi	r20, 0x01	; 1
    1ef4:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(RAM_CTRL_PORT,ADR_13_5_PIN,LOW);
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	61 e0       	ldi	r22, 0x01	; 1
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	DIO_SetPinDirection(RAM_CTRL_PORT,LE_PIN,OUTPUT);
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	63 e0       	ldi	r22, 0x03	; 3
    1f06:	41 e0       	ldi	r20, 0x01	; 1
    1f08:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(RAM_CTRL_PORT,LE_PIN,LOW);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	63 e0       	ldi	r22, 0x03	; 3
    1f10:	40 e0       	ldi	r20, 0x00	; 0
    1f12:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	DIO_SetPinDirection(RAM_CTRL_PORT,OE1_PIN,OUTPUT);
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	64 e0       	ldi	r22, 0x04	; 4
    1f1a:	41 e0       	ldi	r20, 0x01	; 1
    1f1c:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(RAM_CTRL_PORT,OE1_PIN,HIGH);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	64 e0       	ldi	r22, 0x04	; 4
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	DIO_SetPinDirection(RAM_CTRL_PORT,WE1_PIN,OUTPUT);
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	65 e0       	ldi	r22, 0x05	; 5
    1f2e:	41 e0       	ldi	r20, 0x01	; 1
    1f30:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(RAM_CTRL_PORT,WE1_PIN,HIGH);
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	65 e0       	ldi	r22, 0x05	; 5
    1f38:	41 e0       	ldi	r20, 0x01	; 1
    1f3a:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	DIO_SetPinDirection(RAM_CTRL_PORT,CE1_PIN,OUTPUT);
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	66 e0       	ldi	r22, 0x06	; 6
    1f42:	41 e0       	ldi	r20, 0x01	; 1
    1f44:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(RAM_CTRL_PORT,CE1_PIN,LOW);
    1f48:	80 e0       	ldi	r24, 0x00	; 0
    1f4a:	66 e0       	ldi	r22, 0x06	; 6
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>

}
    1f52:	cf 91       	pop	r28
    1f54:	df 91       	pop	r29
    1f56:	08 95       	ret

00001f58 <RAM_WriteData>:

void RAM_WriteData(u32 RamAddress,u8 Data)
{
    1f58:	df 93       	push	r29
    1f5a:	cf 93       	push	r28
    1f5c:	00 d0       	rcall	.+0      	; 0x1f5e <RAM_WriteData+0x6>
    1f5e:	00 d0       	rcall	.+0      	; 0x1f60 <RAM_WriteData+0x8>
    1f60:	0f 92       	push	r0
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	69 83       	std	Y+1, r22	; 0x01
    1f68:	7a 83       	std	Y+2, r23	; 0x02
    1f6a:	8b 83       	std	Y+3, r24	; 0x03
    1f6c:	9c 83       	std	Y+4, r25	; 0x04
    1f6e:	4d 83       	std	Y+5, r20	; 0x05
	DIO_SetPinValue(RAM_CTRL_PORT,ADR_16_PIN,(u8)((RamAddress >> 16) & 0x01));
	DIO_SetPortValue(RAM_ADRH_PORT,(u8)(RamAddress >> 8));
	DIO_SetPinValue(RAM_CTRL_PORT,ADR_3_PIN,(u8)((RamAddress >> 3) & 0x01));
	RAM_ADRL_PORT_REG = (RAM_ADRL_PORT_REG & 0x08)|(0xF7 & (u8)(RamAddress));*/
	/*With Latch*/
	PORTA_register = (PORTA_register & 0x7F)|((u8)((RamAddress >> 16) & 0x01));
    1f70:	4b e3       	ldi	r20, 0x3B	; 59
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	eb e3       	ldi	r30, 0x3B	; 59
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	2f 77       	andi	r18, 0x7F	; 127
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	9a 81       	ldd	r25, Y+2	; 0x02
    1f82:	ab 81       	ldd	r26, Y+3	; 0x03
    1f84:	bc 81       	ldd	r27, Y+4	; 0x04
    1f86:	cd 01       	movw	r24, r26
    1f88:	aa 27       	eor	r26, r26
    1f8a:	bb 27       	eor	r27, r27
    1f8c:	81 70       	andi	r24, 0x01	; 1
    1f8e:	82 2b       	or	r24, r18
    1f90:	fa 01       	movw	r30, r20
    1f92:	80 83       	st	Z, r24
	SET_BIT(PORTA_register,LE_PIN);
    1f94:	ab e3       	ldi	r26, 0x3B	; 59
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	eb e3       	ldi	r30, 0x3B	; 59
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	88 60       	ori	r24, 0x08	; 8
    1fa0:	8c 93       	st	X, r24
	PORTD_register =(u8)(RamAddress >> 8);
    1fa2:	e2 e3       	ldi	r30, 0x32	; 50
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1faa:	ab 81       	ldd	r26, Y+3	; 0x03
    1fac:	bc 81       	ldd	r27, Y+4	; 0x04
    1fae:	89 2f       	mov	r24, r25
    1fb0:	9a 2f       	mov	r25, r26
    1fb2:	ab 2f       	mov	r26, r27
    1fb4:	bb 27       	eor	r27, r27
    1fb6:	80 83       	st	Z, r24
	CLR_BIT(PORTA_register,LE_PIN);
    1fb8:	ab e3       	ldi	r26, 0x3B	; 59
    1fba:	b0 e0       	ldi	r27, 0x00	; 0
    1fbc:	eb e3       	ldi	r30, 0x3B	; 59
    1fbe:	f0 e0       	ldi	r31, 0x00	; 0
    1fc0:	80 81       	ld	r24, Z
    1fc2:	87 7f       	andi	r24, 0xF7	; 247
    1fc4:	8c 93       	st	X, r24
	PORTD_register =(u8)(RamAddress );
    1fc6:	e2 e3       	ldi	r30, 0x32	; 50
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	80 83       	st	Z, r24
	//DIO_SetPortValue(RAM_ADRL_PORT,(u8)(RamAddress));
	//DIO_SetPinValue(RAM_CTRL_PORT,ADR_13_5_PIN,(u8)((RamAddress >> 5) & 0x01));
	//RAM_ADR_PORT_REG =(RAM_ADR_PORT_REG & 0x20)|((u8)(RamAddress) & 0xDF);

	/*Setting Control Signals to WRITE*/
	DIO_SetPinValue(RAM_CTRL_PORT,CE1_PIN,LOW);
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	66 e0       	ldi	r22, 0x06	; 6
    1fd2:	40 e0       	ldi	r20, 0x00	; 0
    1fd4:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	DIO_SetPinValue(RAM_CTRL_PORT,OE1_PIN,HIGH);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	64 e0       	ldi	r22, 0x04	; 4
    1fdc:	41 e0       	ldi	r20, 0x01	; 1
    1fde:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	DIO_SetPinValue(RAM_CTRL_PORT,WE1_PIN,LOW);
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	65 e0       	ldi	r22, 0x05	; 5
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	/*Apply Data to RAM*/
	//DIO_SetPortValue(RAM_DATA_PORT,Data);
	/*DISABLE RAM output*/
	DIO_SetPinValue(RAM_CTRL_PORT,WE1_PIN,HIGH);
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	65 e0       	ldi	r22, 0x05	; 5
    1ff0:	41 e0       	ldi	r20, 0x01	; 1
    1ff2:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
}
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	cf 91       	pop	r28
    2002:	df 91       	pop	r29
    2004:	08 95       	ret

00002006 <RAM_ReadData>:
u8 RAM_ReadData(u32 RamAddress)
{
    2006:	df 93       	push	r29
    2008:	cf 93       	push	r28
    200a:	00 d0       	rcall	.+0      	; 0x200c <RAM_ReadData+0x6>
    200c:	00 d0       	rcall	.+0      	; 0x200e <RAM_ReadData+0x8>
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	69 83       	std	Y+1, r22	; 0x01
    2014:	7a 83       	std	Y+2, r23	; 0x02
    2016:	8b 83       	std	Y+3, r24	; 0x03
    2018:	9c 83       	std	Y+4, r25	; 0x04
	static u8 RamData = 0;
		/*Setting Address*/
	/*With Latch*/
		DIO_SetPinValue(RAM_CTRL_PORT,ADR_16_PIN,(u8)((RamAddress >> 16) & 0x01));
    201a:	89 81       	ldd	r24, Y+1	; 0x01
    201c:	9a 81       	ldd	r25, Y+2	; 0x02
    201e:	ab 81       	ldd	r26, Y+3	; 0x03
    2020:	bc 81       	ldd	r27, Y+4	; 0x04
    2022:	cd 01       	movw	r24, r26
    2024:	aa 27       	eor	r26, r26
    2026:	bb 27       	eor	r27, r27
    2028:	98 2f       	mov	r25, r24
    202a:	91 70       	andi	r25, 0x01	; 1
    202c:	80 e0       	ldi	r24, 0x00	; 0
    202e:	67 e0       	ldi	r22, 0x07	; 7
    2030:	49 2f       	mov	r20, r25
    2032:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
		SET_BIT(PORTA_register,LE_PIN);
    2036:	ab e3       	ldi	r26, 0x3B	; 59
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	eb e3       	ldi	r30, 0x3B	; 59
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	88 60       	ori	r24, 0x08	; 8
    2042:	8c 93       	st	X, r24
		DIO_SetPinValue(RAM_CTRL_PORT,ADR_13_5_PIN,(u8)((RamAddress >> 13) & 0x01));
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	9a 81       	ldd	r25, Y+2	; 0x02
    2048:	ab 81       	ldd	r26, Y+3	; 0x03
    204a:	bc 81       	ldd	r27, Y+4	; 0x04
    204c:	07 2e       	mov	r0, r23
    204e:	7d e0       	ldi	r23, 0x0D	; 13
    2050:	b6 95       	lsr	r27
    2052:	a7 95       	ror	r26
    2054:	97 95       	ror	r25
    2056:	87 95       	ror	r24
    2058:	7a 95       	dec	r23
    205a:	d1 f7       	brne	.-12     	; 0x2050 <RAM_ReadData+0x4a>
    205c:	70 2d       	mov	r23, r0
    205e:	98 2f       	mov	r25, r24
    2060:	91 70       	andi	r25, 0x01	; 1
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	61 e0       	ldi	r22, 0x01	; 1
    2066:	49 2f       	mov	r20, r25
    2068:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
		RAM_ADR_PORT_REG =((RAM_ADR_PORT_REG & 0x20)|(u8)((RamAddress >> 8) & 0xDF));
    206c:	42 e3       	ldi	r20, 0x32	; 50
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	e2 e3       	ldi	r30, 0x32	; 50
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	28 2f       	mov	r18, r24
    2078:	20 72       	andi	r18, 0x20	; 32
    207a:	89 81       	ldd	r24, Y+1	; 0x01
    207c:	9a 81       	ldd	r25, Y+2	; 0x02
    207e:	ab 81       	ldd	r26, Y+3	; 0x03
    2080:	bc 81       	ldd	r27, Y+4	; 0x04
    2082:	89 2f       	mov	r24, r25
    2084:	9a 2f       	mov	r25, r26
    2086:	ab 2f       	mov	r26, r27
    2088:	bb 27       	eor	r27, r27
    208a:	8f 7d       	andi	r24, 0xDF	; 223
    208c:	82 2b       	or	r24, r18
    208e:	fa 01       	movw	r30, r20
    2090:	80 83       	st	Z, r24
		CLR_BIT(PORTA_register,LE_PIN);
    2092:	ab e3       	ldi	r26, 0x3B	; 59
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	eb e3       	ldi	r30, 0x3B	; 59
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	87 7f       	andi	r24, 0xF7	; 247
    209e:	8c 93       	st	X, r24
		DIO_SetPinValue(RAM_CTRL_PORT,ADR_13_5_PIN,(u8)((RamAddress >> 5) & 0x01));
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	9a 81       	ldd	r25, Y+2	; 0x02
    20a4:	ab 81       	ldd	r26, Y+3	; 0x03
    20a6:	bc 81       	ldd	r27, Y+4	; 0x04
    20a8:	68 94       	set
    20aa:	14 f8       	bld	r1, 4
    20ac:	b6 95       	lsr	r27
    20ae:	a7 95       	ror	r26
    20b0:	97 95       	ror	r25
    20b2:	87 95       	ror	r24
    20b4:	16 94       	lsr	r1
    20b6:	d1 f7       	brne	.-12     	; 0x20ac <RAM_ReadData+0xa6>
    20b8:	98 2f       	mov	r25, r24
    20ba:	91 70       	andi	r25, 0x01	; 1
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	49 2f       	mov	r20, r25
    20c2:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
		RAM_ADR_PORT_REG =((RAM_ADR_PORT_REG & 0x20)|((u8)(RamAddress) & 0xDF));
    20c6:	a2 e3       	ldi	r26, 0x32	; 50
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e2 e3       	ldi	r30, 0x32	; 50
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	98 2f       	mov	r25, r24
    20d2:	90 72       	andi	r25, 0x20	; 32
    20d4:	89 81       	ldd	r24, Y+1	; 0x01
    20d6:	8f 7d       	andi	r24, 0xDF	; 223
    20d8:	89 2b       	or	r24, r25
    20da:	8c 93       	st	X, r24
		/*Setting Control Signals to read*/
		SET_BIT(PORTA_register,WE1_PIN);
    20dc:	ab e3       	ldi	r26, 0x3B	; 59
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	eb e3       	ldi	r30, 0x3B	; 59
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 81       	ld	r24, Z
    20e6:	80 62       	ori	r24, 0x20	; 32
    20e8:	8c 93       	st	X, r24
		CLR_BIT(PORTA_register,OE1_PIN);
    20ea:	ab e3       	ldi	r26, 0x3B	; 59
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	eb e3       	ldi	r30, 0x3B	; 59
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	8f 7e       	andi	r24, 0xEF	; 239
    20f6:	8c 93       	st	X, r24
		CLR_BIT(PORTA_register,CE1_PIN);
    20f8:	ab e3       	ldi	r26, 0x3B	; 59
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	eb e3       	ldi	r30, 0x3B	; 59
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8f 7b       	andi	r24, 0xBF	; 191
    2104:	8c 93       	st	X, r24
		/*Getting Data to RAM*/
		RamData = RAM_DATA_READ_REG;
    2106:	e3 e3       	ldi	r30, 0x33	; 51
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	80 81       	ld	r24, Z
    210c:	80 93 8a 00 	sts	0x008A, r24
		/*DISABLE RAM output*/
		SET_BIT(PORTA_register,OE1_PIN);
    2110:	ab e3       	ldi	r26, 0x3B	; 59
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	eb e3       	ldi	r30, 0x3B	; 59
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	80 81       	ld	r24, Z
    211a:	80 61       	ori	r24, 0x10	; 16
    211c:	8c 93       	st	X, r24

		return RamData;
    211e:	80 91 8a 00 	lds	r24, 0x008A
}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	08 95       	ret

00002130 <SPI_Init>:
#include "SPI_Interface.h"
#include "SPI_Private.h"
#include "SPI_Config.h"

void SPI_Init (void)
{
    2130:	df 93       	push	r29
    2132:	cf 93       	push	r28
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
	SPCR_Register = (SPI_INT_Status<<7)|(SPI_Status<<6)|(SPI_DATA_ORDER<<5)|(SPI_MODE<<4)|(SPI_Clock_Polarity<<3)|(SPI_Clock_Phase<<2)|(SPI_PRESCALER<<0);
    2138:	ed e2       	ldi	r30, 0x2D	; 45
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	82 e5       	ldi	r24, 0x52	; 82
    213e:	80 83       	st	Z, r24
	/* Enable SPI, Master, set clock rate fck/16 , CPHA setupthen sample */
	//SPCR_REG = (1<<6)|(1<<4)|(1<<0)|(1<<2);


#if (SPI_MODE == SPI_MASTER)
	SET_BIT(SPCR_Register,4);
    2140:	ad e2       	ldi	r26, 0x2D	; 45
    2142:	b0 e0       	ldi	r27, 0x00	; 0
    2144:	ed e2       	ldi	r30, 0x2D	; 45
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	80 61       	ori	r24, 0x10	; 16
    214c:	8c 93       	st	X, r24
#else
	CLR_BIT(SPCR_Register,4);
#endif
}
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <SPI_SynchTransceiver>:

void SPI_SynchTransceiver(u8 Copy_DataSent, u8 *Copy_DataReceived)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <SPI_SynchTransceiver+0x6>
    215a:	0f 92       	push	r0
    215c:	cd b7       	in	r28, 0x3d	; 61
    215e:	de b7       	in	r29, 0x3e	; 62
    2160:	89 83       	std	Y+1, r24	; 0x01
    2162:	7b 83       	std	Y+3, r23	; 0x03
    2164:	6a 83       	std	Y+2, r22	; 0x02
	/* Start transmission */
	SPDR_Register = Copy_DataSent;
    2166:	ef e2       	ldi	r30, 0x2F	; 47
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	89 81       	ldd	r24, Y+1	; 0x01
    216c:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPSR_Register & (1<<7)));
    216e:	ee e2       	ldi	r30, 0x2E	; 46
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	88 23       	and	r24, r24
    2176:	dc f7       	brge	.-10     	; 0x216e <SPI_SynchTransceiver+0x1a>
	/*save Received Byte*/
	*Copy_DataReceived = SPDR_Register;
    2178:	ef e2       	ldi	r30, 0x2F	; 47
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	ea 81       	ldd	r30, Y+2	; 0x02
    2180:	fb 81       	ldd	r31, Y+3	; 0x03
    2182:	80 83       	st	Z, r24
}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	cf 91       	pop	r28
    218c:	df 91       	pop	r29
    218e:	08 95       	ret

00002190 <SPI_SendByte>:
void SPI_SendByte(u8 Data)
{
    2190:	df 93       	push	r29
    2192:	cf 93       	push	r28
    2194:	0f 92       	push	r0
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
    219a:	89 83       	std	Y+1, r24	; 0x01
	SPDR_Register = Data;
    219c:	ef e2       	ldi	r30, 0x2F	; 47
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	89 81       	ldd	r24, Y+1	; 0x01
    21a2:	80 83       	st	Z, r24
	while(!(GET_BIT(SPSR_Register,7) ));
    21a4:	ee e2       	ldi	r30, 0x2E	; 46
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	88 23       	and	r24, r24
    21ac:	dc f7       	brge	.-10     	; 0x21a4 <SPI_SendByte+0x14>
}
    21ae:	0f 90       	pop	r0
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <TIMER0_INIT>:



/*Writing Zero to Timer counter Register , compare match register or IC register means leave it  at default*/
void TIMER0_INIT(u8 u8_TIM0_REGValue,u8 u8_COM_MAT_REGValue)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	00 d0       	rcall	.+0      	; 0x21bc <TIMER0_INIT+0x6>
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	89 83       	std	Y+1, r24	; 0x01
    21c2:	6a 83       	std	Y+2, r22	; 0x02

	/*TIMER0 Initialize*/
	/*INIT parameters are set on TIMER CONFG file */
	TCCR0_register = TIM0_FOC0_STATE << 7|TIM0_WG_MODE |TIM0_OC0_STATE << 4 | TIM0_CLK_PRESCALAR;
    21c4:	e3 e5       	ldi	r30, 0x53	; 83
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	8a e0       	ldi	r24, 0x0A	; 10
    21ca:	80 83       	st	Z, r24

	/*SET Timer REG with a Value Bigger than or Equal Zero to increment on it*/
	if (((TIM0_WG_MODE == TIM0_NORMAL) || (TIM0_WG_MODE == TIM0_CTC)) && (u8_TIM0_REGValue != 0))
    21cc:	89 81       	ldd	r24, Y+1	; 0x01
    21ce:	88 23       	and	r24, r24
    21d0:	21 f0       	breq	.+8      	; 0x21da <TIMER0_INIT+0x24>
	{
		TCNT0_register = u8_TIM0_REGValue;
    21d2:	e2 e5       	ldi	r30, 0x52	; 82
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	89 81       	ldd	r24, Y+1	; 0x01
    21d8:	80 83       	st	Z, r24
	}

	/*Load Compare Match Register if WG mode is not NORMAL MODE */
	if ((TIM0_WG_MODE != TIM0_NORMAL) && (u8_COM_MAT_REGValue))
    21da:	8a 81       	ldd	r24, Y+2	; 0x02
    21dc:	88 23       	and	r24, r24
    21de:	21 f0       	breq	.+8      	; 0x21e8 <TIMER0_INIT+0x32>
	{
		OCR0_register = u8_COM_MAT_REGValue;
    21e0:	ec e5       	ldi	r30, 0x5C	; 92
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	8a 81       	ldd	r24, Y+2	; 0x02
    21e6:	80 83       	st	Z, r24

	/*control OVf interrupt*/
	switch(TIM0_OVF_INT_STATE)
	{
		case TIM0_OVF_INT_EN  : SET_BIT(TIMSK_register,TOIE0);		break;
		case TIM0_OVF_INT_DIS :	CLR_BIT(TIMSK_register,TOIE0);		break;
    21e8:	a9 e5       	ldi	r26, 0x59	; 89
    21ea:	b0 e0       	ldi	r27, 0x00	; 0
    21ec:	e9 e5       	ldi	r30, 0x59	; 89
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	80 81       	ld	r24, Z
    21f2:	8e 7f       	andi	r24, 0xFE	; 254
    21f4:	8c 93       	st	X, r24

	/*control CMP interrupt*/
	switch(TIM0_CMP_INT_STATE)
	{

		case TIM0_CMP_INT_EN  :	SET_BIT(TIMSK_register,OCIE0);		break;
    21f6:	a9 e5       	ldi	r26, 0x59	; 89
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e9 e5       	ldi	r30, 0x59	; 89
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	80 81       	ld	r24, Z
    2200:	82 60       	ori	r24, 0x02	; 2
    2202:	8c 93       	st	X, r24
		case TIM0_CMP_INT_DIS :	CLR_BIT(TIMSK_register,OCIE0);		break;
	}
	/*Enable Global Interrupt from INTERRUPT.h*/
}
    2204:	0f 90       	pop	r0
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <TIMER0_REINIT>:
void TIMER0_REINIT(u8 WG_MODE,u8 OC0_STATE,u8 CLK_PRESCALAR,u8 OVF_INT_STATE,u8 CMP_INT_STATE)
{
    220e:	0f 93       	push	r16
    2210:	df 93       	push	r29
    2212:	cf 93       	push	r28
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	29 97       	sbiw	r28, 0x09	; 9
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	de bf       	out	0x3e, r29	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	cd bf       	out	0x3d, r28	; 61
    2224:	89 83       	std	Y+1, r24	; 0x01
    2226:	6a 83       	std	Y+2, r22	; 0x02
    2228:	4b 83       	std	Y+3, r20	; 0x03
    222a:	2c 83       	std	Y+4, r18	; 0x04
    222c:	0d 83       	std	Y+5, r16	; 0x05
	/*use same macros values to re-initailize Timer0 with new Settings*/
	/*TIMER0 Stopped(No Clk source)*/
	TCCR0_register &= 0xF8;
    222e:	a3 e5       	ldi	r26, 0x53	; 83
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	e3 e5       	ldi	r30, 0x53	; 83
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	88 7f       	andi	r24, 0xF8	; 248
    223a:	8c 93       	st	X, r24
	/*TIMER0 Re-Init*/
	TCCR0_register = TIM0_FOC0_STATE << 7|WG_MODE |OC0_STATE << 4 | CLK_PRESCALAR;
    223c:	e3 e5       	ldi	r30, 0x53	; 83
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	82 95       	swap	r24
    2248:	92 95       	swap	r25
    224a:	90 7f       	andi	r25, 0xF0	; 240
    224c:	98 27       	eor	r25, r24
    224e:	80 7f       	andi	r24, 0xF0	; 240
    2250:	98 27       	eor	r25, r24
    2252:	98 2f       	mov	r25, r24
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	98 2b       	or	r25, r24
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	89 2b       	or	r24, r25
    225c:	80 83       	st	Z, r24
	/*control OVf interrupt*/
	switch(OVF_INT_STATE)
    225e:	8c 81       	ldd	r24, Y+4	; 0x04
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	39 87       	std	Y+9, r19	; 0x09
    2266:	28 87       	std	Y+8, r18	; 0x08
    2268:	88 85       	ldd	r24, Y+8	; 0x08
    226a:	99 85       	ldd	r25, Y+9	; 0x09
    226c:	00 97       	sbiw	r24, 0x00	; 0
    226e:	69 f0       	breq	.+26     	; 0x228a <TIMER0_REINIT+0x7c>
    2270:	28 85       	ldd	r18, Y+8	; 0x08
    2272:	39 85       	ldd	r19, Y+9	; 0x09
    2274:	21 30       	cpi	r18, 0x01	; 1
    2276:	31 05       	cpc	r19, r1
    2278:	79 f4       	brne	.+30     	; 0x2298 <TIMER0_REINIT+0x8a>
	{
		case TIM0_OVF_INT_EN  : SET_BIT(TIMSK_register,TOIE0);		break;
    227a:	a9 e5       	ldi	r26, 0x59	; 89
    227c:	b0 e0       	ldi	r27, 0x00	; 0
    227e:	e9 e5       	ldi	r30, 0x59	; 89
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	81 60       	ori	r24, 0x01	; 1
    2286:	8c 93       	st	X, r24
    2288:	07 c0       	rjmp	.+14     	; 0x2298 <TIMER0_REINIT+0x8a>
		case TIM0_OVF_INT_DIS :	CLR_BIT(TIMSK_register,TOIE0);		break;
    228a:	a9 e5       	ldi	r26, 0x59	; 89
    228c:	b0 e0       	ldi	r27, 0x00	; 0
    228e:	e9 e5       	ldi	r30, 0x59	; 89
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	80 81       	ld	r24, Z
    2294:	8e 7f       	andi	r24, 0xFE	; 254
    2296:	8c 93       	st	X, r24

	}

	/*control CMP interrupt*/
	switch(CMP_INT_STATE)
    2298:	8d 81       	ldd	r24, Y+5	; 0x05
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	3f 83       	std	Y+7, r19	; 0x07
    22a0:	2e 83       	std	Y+6, r18	; 0x06
    22a2:	8e 81       	ldd	r24, Y+6	; 0x06
    22a4:	9f 81       	ldd	r25, Y+7	; 0x07
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	69 f0       	breq	.+26     	; 0x22c4 <TIMER0_REINIT+0xb6>
    22aa:	2e 81       	ldd	r18, Y+6	; 0x06
    22ac:	3f 81       	ldd	r19, Y+7	; 0x07
    22ae:	21 30       	cpi	r18, 0x01	; 1
    22b0:	31 05       	cpc	r19, r1
    22b2:	79 f4       	brne	.+30     	; 0x22d2 <TIMER0_REINIT+0xc4>
	{

		case TIM0_CMP_INT_EN  :	SET_BIT(TIMSK_register,OCIE0);		break;
    22b4:	a9 e5       	ldi	r26, 0x59	; 89
    22b6:	b0 e0       	ldi	r27, 0x00	; 0
    22b8:	e9 e5       	ldi	r30, 0x59	; 89
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	82 60       	ori	r24, 0x02	; 2
    22c0:	8c 93       	st	X, r24
    22c2:	07 c0       	rjmp	.+14     	; 0x22d2 <TIMER0_REINIT+0xc4>
		case TIM0_CMP_INT_DIS :	CLR_BIT(TIMSK_register,OCIE0);		break;
    22c4:	a9 e5       	ldi	r26, 0x59	; 89
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	e9 e5       	ldi	r30, 0x59	; 89
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8d 7f       	andi	r24, 0xFD	; 253
    22d0:	8c 93       	st	X, r24
	}
	/*Enable Global Interrupt from INTERRUPT.h*/
}
    22d2:	29 96       	adiw	r28, 0x09	; 9
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	0f 91       	pop	r16
    22e4:	08 95       	ret

000022e6 <TIM0_Set_TIMER_REG_Value>:


void TIM0_Set_TIMER_REG_Value(u8 u8_RegValue)
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	0f 92       	push	r0
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_register = u8_RegValue;
    22f2:	e2 e5       	ldi	r30, 0x52	; 82
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	89 81       	ldd	r24, Y+1	; 0x01
    22f8:	80 83       	st	Z, r24
}
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <TIM0_Set_CMP_REG_Value>:


void TIM0_Set_CMP_REG_Value(u8 u8_RegValue)
{
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	0f 92       	push	r0
    2308:	cd b7       	in	r28, 0x3d	; 61
    230a:	de b7       	in	r29, 0x3e	; 62
    230c:	89 83       	std	Y+1, r24	; 0x01
	OCR0_register = u8_RegValue;
    230e:	ec e5       	ldi	r30, 0x5C	; 92
    2310:	f0 e0       	ldi	r31, 0x00	; 0
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	80 83       	st	Z, r24
}
    2316:	0f 90       	pop	r0
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <TIMER0_STOPPED>:
void TIMER0_STOPPED(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	/*TIMER0 Stopped(No Clk source)*/
	TCCR0_register &= 0xF8;
    2326:	a3 e5       	ldi	r26, 0x53	; 83
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	e3 e5       	ldi	r30, 0x53	; 83
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	88 7f       	andi	r24, 0xF8	; 248
    2332:	8c 93       	st	X, r24
	/*OVF & CMP INT are disabled*/
	CLR_BIT(TIMSK_register,TOIE0);
    2334:	a9 e5       	ldi	r26, 0x59	; 89
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e9 e5       	ldi	r30, 0x59	; 89
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8e 7f       	andi	r24, 0xFE	; 254
    2340:	8c 93       	st	X, r24
	CLR_BIT(TIMSK_register,OCIE0);
    2342:	a9 e5       	ldi	r26, 0x59	; 89
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e9 e5       	ldi	r30, 0x59	; 89
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	8d 7f       	andi	r24, 0xFD	; 253
    234e:	8c 93       	st	X, r24

}
    2350:	cf 91       	pop	r28
    2352:	df 91       	pop	r29
    2354:	08 95       	ret

00002356 <TIMER1_INIT>:
/*****************************************************************************************************/
/*****************************************************************************************************/


void TIMER1_INIT(u16 u16_TIM1_REGValue,u16 u16_COMA_MAT_REGValue,u16 u16_COMB_MAT_REGValue,u16 u16_IC_REGValue)
{
    2356:	df 93       	push	r29
    2358:	cf 93       	push	r28
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	2a 97       	sbiw	r28, 0x0a	; 10
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	9c 83       	std	Y+4, r25	; 0x04
    236c:	8b 83       	std	Y+3, r24	; 0x03
    236e:	7e 83       	std	Y+6, r23	; 0x06
    2370:	6d 83       	std	Y+5, r22	; 0x05
    2372:	58 87       	std	Y+8, r21	; 0x08
    2374:	4f 83       	std	Y+7, r20	; 0x07
    2376:	3a 87       	std	Y+10, r19	; 0x0a
    2378:	29 87       	std	Y+9, r18	; 0x09
		case TIM1_PWM_PC_TOP_ICR: u8_WGM_13_12_Value = WGM_13_12_10 ; u8_WGM_11_10_Value= WGM_11_10_10 	;				break;
		case TIM1_PWM_PC_TOP_OCR: u8_WGM_13_12_Value = WGM_13_12_11 ; u8_WGM_11_10_Value= WGM_11_10_11 	;				break;

		case TIM1_CTC_TOP_ICR 	: u8_WGM_13_12_Value = WGM_13_12_12 ; u8_WGM_11_10_Value= WGM_11_10_12 	;				break;

		case TIM1_PWM_FAST_TOP_ICR:u8_WGM_13_12_Value= WGM_13_12_14 ; u8_WGM_11_10_Value= WGM_11_10_14 	;				break;
    237a:	83 e0       	ldi	r24, 0x03	; 3
    237c:	89 83       	std	Y+1, r24	; 0x01
    237e:	82 e0       	ldi	r24, 0x02	; 2
    2380:	8a 83       	std	Y+2, r24	; 0x02
	}

	/*Load Compare Match Register if WG mode is not NORMAL MODE */
	if (TIM1_WG_MODE != TIM1_NORMAL)
	{
		if (u16_COMA_MAT_REGValue != 0){OCR1A_register = u16_COMA_MAT_REGValue ;}
    2382:	8d 81       	ldd	r24, Y+5	; 0x05
    2384:	9e 81       	ldd	r25, Y+6	; 0x06
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	31 f0       	breq	.+12     	; 0x2396 <TIMER1_INIT+0x40>
    238a:	ea e4       	ldi	r30, 0x4A	; 74
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	8d 81       	ldd	r24, Y+5	; 0x05
    2390:	9e 81       	ldd	r25, Y+6	; 0x06
    2392:	91 83       	std	Z+1, r25	; 0x01
    2394:	80 83       	st	Z, r24
		if (u16_COMB_MAT_REGValue != 0){OCR1B_register = u16_COMB_MAT_REGValue ;}
    2396:	8f 81       	ldd	r24, Y+7	; 0x07
    2398:	98 85       	ldd	r25, Y+8	; 0x08
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	31 f0       	breq	.+12     	; 0x23aa <TIMER1_INIT+0x54>
    239e:	e8 e4       	ldi	r30, 0x48	; 72
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	8f 81       	ldd	r24, Y+7	; 0x07
    23a4:	98 85       	ldd	r25, Y+8	; 0x08
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
	}

	/*Load Input Capture Register it ICR was top value*/
	if (((TIM1_WG_MODE == TIM1_PWM_PC_TOP_ICR)||(TIM1_WG_MODE == TIM1_PWM_FAST_TOP_ICR)||(TIM1_WG_MODE == TIM1_CTC_TOP_ICR))&& (u16_IC_REGValue != 0))
    23aa:	89 85       	ldd	r24, Y+9	; 0x09
    23ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ae:	00 97       	sbiw	r24, 0x00	; 0
    23b0:	31 f0       	breq	.+12     	; 0x23be <TIMER1_INIT+0x68>
	{
		ICR1_register = u16_IC_REGValue;
    23b2:	e6 e4       	ldi	r30, 0x46	; 70
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	89 85       	ldd	r24, Y+9	; 0x09
    23b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
	}

	/*control OVf interrupt*/
	switch(TIM1_OVF_INT_STATE)
	{
		case TIM1_OVF_INT_EN  : SET_BIT(TIMSK_register,TOIE1);		break;
    23be:	a9 e5       	ldi	r26, 0x59	; 89
    23c0:	b0 e0       	ldi	r27, 0x00	; 0
    23c2:	e9 e5       	ldi	r30, 0x59	; 89
    23c4:	f0 e0       	ldi	r31, 0x00	; 0
    23c6:	80 81       	ld	r24, Z
    23c8:	84 60       	ori	r24, 0x04	; 4
    23ca:	8c 93       	st	X, r24
	/*control CMP interrupt*/
	switch(TIM1_CMPA_INT_STATE)
	{

		case TIM1_CMPA_INT_EN  :	SET_BIT(TIMSK_register,OCIE1A);		break;
		case TIM1_CMPB_INT_DIS :	CLR_BIT(TIMSK_register,OCIE1A);		break;
    23cc:	a9 e5       	ldi	r26, 0x59	; 89
    23ce:	b0 e0       	ldi	r27, 0x00	; 0
    23d0:	e9 e5       	ldi	r30, 0x59	; 89
    23d2:	f0 e0       	ldi	r31, 0x00	; 0
    23d4:	80 81       	ld	r24, Z
    23d6:	8f 7e       	andi	r24, 0xEF	; 239
    23d8:	8c 93       	st	X, r24
	}
	switch(TIM1_CMPB_INT_STATE)
		{

			case TIM1_CMPB_INT_EN  :	SET_BIT(TIMSK_register,OCIE1B);		break;
			case TIM1_CMPB_INT_DIS :	CLR_BIT(TIMSK_register,OCIE1B);		break;
    23da:	a9 e5       	ldi	r26, 0x59	; 89
    23dc:	b0 e0       	ldi	r27, 0x00	; 0
    23de:	e9 e5       	ldi	r30, 0x59	; 89
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	80 81       	ld	r24, Z
    23e4:	87 7f       	andi	r24, 0xF7	; 247
    23e6:	8c 93       	st	X, r24
	/*Control IC interrupt*/
	switch(TIM1_ICU_INT_STATE)
		{

			case TIM1_ICU_INT_EN  :	SET_BIT(TIMSK_register,TICIE1);		break;
			case TIM1_ICU_INT_DIS :	CLR_BIT(TIMSK_register,TICIE1);		break;
    23e8:	a9 e5       	ldi	r26, 0x59	; 89
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e9 e5       	ldi	r30, 0x59	; 89
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8f 7d       	andi	r24, 0xDF	; 223
    23f4:	8c 93       	st	X, r24
		}
	/*Enable Global Interrupt from INTERRUPT.h*/
	/*setting TIMER1 Control registers*/
	TCCR1A_register = TIM1_OC1A_STATE << 6 |TIM1_OC1B_STATE << 4|TIM1_FOC1A_STATE <<3 |TIM1_FOC1B_STATE << 2 |u8_WGM_11_10_Value;
    23f6:	ef e4       	ldi	r30, 0x4F	; 79
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	8a 81       	ldd	r24, Y+2	; 0x02
    23fc:	80 68       	ori	r24, 0x80	; 128
    23fe:	80 83       	st	Z, r24
	TCCR1B_register = TIM1_IN_CAP_NOISE_CAN_STATE << 7 |TIM1_IN_CAP_Edge_STATE << 6 | 0 << 5 | u8_WGM_13_12_Value << 3 |TIM1_CLK_PRESCALAR;
    2400:	ee e4       	ldi	r30, 0x4E	; 78
    2402:	f0 e0       	ldi	r31, 0x00	; 0
    2404:	89 81       	ldd	r24, Y+1	; 0x01
    2406:	88 2f       	mov	r24, r24
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	88 0f       	add	r24, r24
    240c:	99 1f       	adc	r25, r25
    240e:	88 0f       	add	r24, r24
    2410:	99 1f       	adc	r25, r25
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	81 60       	ori	r24, 0x01	; 1
    2418:	80 83       	st	Z, r24

}
    241a:	2a 96       	adiw	r28, 0x0a	; 10
    241c:	0f b6       	in	r0, 0x3f	; 63
    241e:	f8 94       	cli
    2420:	de bf       	out	0x3e, r29	; 62
    2422:	0f be       	out	0x3f, r0	; 63
    2424:	cd bf       	out	0x3d, r28	; 61
    2426:	cf 91       	pop	r28
    2428:	df 91       	pop	r29
    242a:	08 95       	ret

0000242c <TIM1_Set_CMPA_REG_Value>:




void TIM1_Set_CMPA_REG_Value(u16 u16_RegValue)
{
    242c:	df 93       	push	r29
    242e:	cf 93       	push	r28
    2430:	00 d0       	rcall	.+0      	; 0x2432 <TIM1_Set_CMPA_REG_Value+0x6>
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	9a 83       	std	Y+2, r25	; 0x02
    2438:	89 83       	std	Y+1, r24	; 0x01

	OCR1A_register = u16_RegValue;
    243a:	ea e4       	ldi	r30, 0x4A	; 74
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	89 81       	ldd	r24, Y+1	; 0x01
    2440:	9a 81       	ldd	r25, Y+2	; 0x02
    2442:	91 83       	std	Z+1, r25	; 0x01
    2444:	80 83       	st	Z, r24

}
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	cf 91       	pop	r28
    244c:	df 91       	pop	r29
    244e:	08 95       	ret

00002450 <TIM1_Set_CMPB_REG_Value>:


void TIM1_Set_CMPB_REG_Value(u16 u16_RegValue)
{
    2450:	df 93       	push	r29
    2452:	cf 93       	push	r28
    2454:	00 d0       	rcall	.+0      	; 0x2456 <TIM1_Set_CMPB_REG_Value+0x6>
    2456:	cd b7       	in	r28, 0x3d	; 61
    2458:	de b7       	in	r29, 0x3e	; 62
    245a:	9a 83       	std	Y+2, r25	; 0x02
    245c:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_register = u16_RegValue;
    245e:	e8 e4       	ldi	r30, 0x48	; 72
    2460:	f0 e0       	ldi	r31, 0x00	; 0
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	91 83       	std	Z+1, r25	; 0x01
    2468:	80 83       	st	Z, r24

}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	cf 91       	pop	r28
    2470:	df 91       	pop	r29
    2472:	08 95       	ret

00002474 <TIM1_Set_TIMER_REG_Value>:


void TIM1_Set_TIMER_REG_Value(u16 u16_RegValue)
{
    2474:	df 93       	push	r29
    2476:	cf 93       	push	r28
    2478:	00 d0       	rcall	.+0      	; 0x247a <TIM1_Set_TIMER_REG_Value+0x6>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	9a 83       	std	Y+2, r25	; 0x02
    2480:	89 83       	std	Y+1, r24	; 0x01
	TCNT1_register = u16_RegValue;
    2482:	ec e4       	ldi	r30, 0x4C	; 76
    2484:	f0 e0       	ldi	r31, 0x00	; 0
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	91 83       	std	Z+1, r25	; 0x01
    248c:	80 83       	st	Z, r24

}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	cf 91       	pop	r28
    2494:	df 91       	pop	r29
    2496:	08 95       	ret

00002498 <TIM1_Set_IC_REG_Value>:


void TIM1_Set_IC_REG_Value(u16 u16_RegValue)
{
    2498:	df 93       	push	r29
    249a:	cf 93       	push	r28
    249c:	00 d0       	rcall	.+0      	; 0x249e <TIM1_Set_IC_REG_Value+0x6>
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9a 83       	std	Y+2, r25	; 0x02
    24a4:	89 83       	std	Y+1, r24	; 0x01
	ICR1_register = u16_RegValue;
    24a6:	e6 e4       	ldi	r30, 0x46	; 70
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	91 83       	std	Z+1, r25	; 0x01
    24b0:	80 83       	st	Z, r24


}
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <TIMER1_STOPPED>:
void TIMER1_STOPPED(void)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
	/*TIMER0 Stopped(No Clk source)*/
	TCCR1B_register &= 0xF8;
    24c4:	ae e4       	ldi	r26, 0x4E	; 78
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ee e4       	ldi	r30, 0x4E	; 78
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	88 7f       	andi	r24, 0xF8	; 248
    24d0:	8c 93       	st	X, r24
	/*OVF & CMP INT are disabled*/
	CLR_BIT(TIMSK_register,TOIE1);
    24d2:	a9 e5       	ldi	r26, 0x59	; 89
    24d4:	b0 e0       	ldi	r27, 0x00	; 0
    24d6:	e9 e5       	ldi	r30, 0x59	; 89
    24d8:	f0 e0       	ldi	r31, 0x00	; 0
    24da:	80 81       	ld	r24, Z
    24dc:	8b 7f       	andi	r24, 0xFB	; 251
    24de:	8c 93       	st	X, r24
	CLR_BIT(TIMSK_register,OCIE1A);
    24e0:	a9 e5       	ldi	r26, 0x59	; 89
    24e2:	b0 e0       	ldi	r27, 0x00	; 0
    24e4:	e9 e5       	ldi	r30, 0x59	; 89
    24e6:	f0 e0       	ldi	r31, 0x00	; 0
    24e8:	80 81       	ld	r24, Z
    24ea:	8f 7e       	andi	r24, 0xEF	; 239
    24ec:	8c 93       	st	X, r24
	CLR_BIT(TIMSK_register,OCIE1B);
    24ee:	a9 e5       	ldi	r26, 0x59	; 89
    24f0:	b0 e0       	ldi	r27, 0x00	; 0
    24f2:	e9 e5       	ldi	r30, 0x59	; 89
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	80 81       	ld	r24, Z
    24f8:	87 7f       	andi	r24, 0xF7	; 247
    24fa:	8c 93       	st	X, r24
	CLR_BIT(TIMSK_register,TICIE1);
    24fc:	a9 e5       	ldi	r26, 0x59	; 89
    24fe:	b0 e0       	ldi	r27, 0x00	; 0
    2500:	e9 e5       	ldi	r30, 0x59	; 89
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	80 81       	ld	r24, Z
    2506:	8f 7d       	andi	r24, 0xDF	; 223
    2508:	8c 93       	st	X, r24

}
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <main>:
u32 INTCounter2 = 0 ;

u8 WriteDone = 0;
u8 readDone = 0 ;
int main (void)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	2f 97       	sbiw	r28, 0x0f	; 15
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	de bf       	out	0x3e, r29	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	cd bf       	out	0x3d, r28	; 61
	u8 PBValue = 1;
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8f 87       	std	Y+15, r24	; 0x0f
	/*RAM PORT*/
	RAM_PinsInitailize();
    2528:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <RAM_PinsInitailize>
	/*Push Button*/
	DIO_SetPinDirection(PORTA,PIN2,INPUT);//Pulled Up PB to Start Recording
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	62 e0       	ldi	r22, 0x02	; 2
    2530:	40 e0       	ldi	r20, 0x00	; 0
    2532:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTA,PIN2,HIGH);
    2536:	80 e0       	ldi	r24, 0x00	; 0
    2538:	62 e0       	ldi	r22, 0x02	; 2
    253a:	41 e0       	ldi	r20, 0x01	; 1
    253c:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	/*LED State Indicator*/
	DIO_SetPinDirection(PORTB,PIN0,OUTPUT);
    2540:	81 e0       	ldi	r24, 0x01	; 1
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	41 e0       	ldi	r20, 0x01	; 1
    2546:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTB,PIN0,LOW);
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	60 e0       	ldi	r22, 0x00	; 0
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	/*ADC Channel 0 --> PA0*/
	DIO_SetPinDirection(PORTA,PIN0,INPUT);
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	40 e0       	ldi	r20, 0x00	; 0
    255a:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	ADC_intialize();
    255e:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_intialize>
	/*SPI PINS INIT*/
	DIO_SetPinDirection(PORTB,SCK_PIN,OUTPUT);
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	67 e0       	ldi	r22, 0x07	; 7
    2566:	41 e0       	ldi	r20, 0x01	; 1
    2568:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,MOSI_PIN,OUTPUT);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	65 e0       	ldi	r22, 0x05	; 5
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinDirection(PORTB,SS_PIN,OUTPUT);
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	64 e0       	ldi	r22, 0x04	; 4
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 09 06 	call	0xc12	; 0xc12 <DIO_SetPinDirection>
	DIO_SetPinValue(PORTB,SS_PIN,HIGH);
    2580:	81 e0       	ldi	r24, 0x01	; 1
    2582:	64 e0       	ldi	r22, 0x04	; 4
    2584:	41 e0       	ldi	r20, 0x01	; 1
    2586:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	/*SPI MASTER INIT*/
	SPI_Init();
    258a:	0e 94 98 10 	call	0x2130	; 0x2130 <SPI_Init>
	/*MAX7912 Init*/
	MAX7219_Init();
    258e:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <MAX7219_Init>
	/*TIMER0 INT*/
	SET_INT_VEC_TO_ISR(TIMER0_CMP_VEC,AdcCap_MemoStore);
    2592:	27 ea       	ldi	r18, 0xA7	; 167
    2594:	33 e1       	ldi	r19, 0x13	; 19
    2596:	8a e0       	ldi	r24, 0x0A	; 10
    2598:	b9 01       	movw	r22, r18
    259a:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <SET_INT_VEC_TO_ISR>
	SET_INT_VEC_TO_ISR(TIMER1_OVF_VEC,Read_GenPWM);
    259e:	25 ec       	ldi	r18, 0xC5	; 197
    25a0:	34 e1       	ldi	r19, 0x14	; 20
    25a2:	89 e0       	ldi	r24, 0x09	; 9
    25a4:	b9 01       	movw	r22, r18
    25a6:	0e 94 e1 09 	call	0x13c2	; 0x13c2 <SET_INT_VEC_TO_ISR>
    25aa:	08 c0       	rjmp	.+16     	; 0x25bc <main+0xac>
	/*Polling on PB*/
	while (PBValue == 1){DIO_GetPinValue(PORTA,PIN2,& PBValue);}
    25ac:	9e 01       	movw	r18, r28
    25ae:	21 5f       	subi	r18, 0xF1	; 241
    25b0:	3f 4f       	sbci	r19, 0xFF	; 255
    25b2:	80 e0       	ldi	r24, 0x00	; 0
    25b4:	62 e0       	ldi	r22, 0x02	; 2
    25b6:	a9 01       	movw	r20, r18
    25b8:	0e 94 2b 08 	call	0x1056	; 0x1056 <DIO_GetPinValue>
    25bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    25be:	81 30       	cpi	r24, 0x01	; 1
    25c0:	a9 f3       	breq	.-22     	; 0x25ac <main+0x9c>
	/*Timer0 Initializing*/
	TIMER0_INIT(0,125);
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	6d e7       	ldi	r22, 0x7D	; 125
    25c6:	0e 94 db 10 	call	0x21b6	; 0x21b6 <TIMER0_INIT>
	/*Enable Global Interrupts*/
	EN_GlobalInterrupt();
    25ca:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <EN_GlobalInterrupt>


	while(1){
		if (WriteDone == 1)
    25ce:	80 91 a1 00 	lds	r24, 0x00A1
    25d2:	81 30       	cpi	r24, 0x01	; 1
    25d4:	09 f0       	breq	.+2      	; 0x25d8 <main+0xc8>
    25d6:	a3 c0       	rjmp	.+326    	; 0x271e <main+0x20e>
		{
			WriteDone = 0;
    25d8:	10 92 a1 00 	sts	0x00A1, r1
			CLR_BIT(PORTB_register,PIN0);
    25dc:	a8 e3       	ldi	r26, 0x38	; 56
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e8 e3       	ldi	r30, 0x38	; 56
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	8e 7f       	andi	r24, 0xFE	; 254
    25e8:	8c 93       	st	X, r24
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	aa ef       	ldi	r26, 0xFA	; 250
    25f0:	b4 e4       	ldi	r27, 0x44	; 68
    25f2:	8b 87       	std	Y+11, r24	; 0x0b
    25f4:	9c 87       	std	Y+12, r25	; 0x0c
    25f6:	ad 87       	std	Y+13, r26	; 0x0d
    25f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    25fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    25fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2600:	9e 85       	ldd	r25, Y+14	; 0x0e
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	4a ef       	ldi	r20, 0xFA	; 250
    2608:	54 e4       	ldi	r21, 0x44	; 68
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	8f 83       	std	Y+7, r24	; 0x07
    2614:	98 87       	std	Y+8, r25	; 0x08
    2616:	a9 87       	std	Y+9, r26	; 0x09
    2618:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    261a:	6f 81       	ldd	r22, Y+7	; 0x07
    261c:	78 85       	ldd	r23, Y+8	; 0x08
    261e:	89 85       	ldd	r24, Y+9	; 0x09
    2620:	9a 85       	ldd	r25, Y+10	; 0x0a
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e8       	ldi	r20, 0x80	; 128
    2628:	5f e3       	ldi	r21, 0x3F	; 63
    262a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    262e:	88 23       	and	r24, r24
    2630:	2c f4       	brge	.+10     	; 0x263c <main+0x12c>
		__ticks = 1;
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	9e 83       	std	Y+6, r25	; 0x06
    2638:	8d 83       	std	Y+5, r24	; 0x05
    263a:	3f c0       	rjmp	.+126    	; 0x26ba <main+0x1aa>
	else if (__tmp > 65535)
    263c:	6f 81       	ldd	r22, Y+7	; 0x07
    263e:	78 85       	ldd	r23, Y+8	; 0x08
    2640:	89 85       	ldd	r24, Y+9	; 0x09
    2642:	9a 85       	ldd	r25, Y+10	; 0x0a
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	3f ef       	ldi	r19, 0xFF	; 255
    2648:	4f e7       	ldi	r20, 0x7F	; 127
    264a:	57 e4       	ldi	r21, 0x47	; 71
    264c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2650:	18 16       	cp	r1, r24
    2652:	4c f5       	brge	.+82     	; 0x26a6 <main+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	6b 85       	ldd	r22, Y+11	; 0x0b
    2656:	7c 85       	ldd	r23, Y+12	; 0x0c
    2658:	8d 85       	ldd	r24, Y+13	; 0x0d
    265a:	9e 85       	ldd	r25, Y+14	; 0x0e
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	40 e2       	ldi	r20, 0x20	; 32
    2662:	51 e4       	ldi	r21, 0x41	; 65
    2664:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2668:	dc 01       	movw	r26, r24
    266a:	cb 01       	movw	r24, r22
    266c:	bc 01       	movw	r22, r24
    266e:	cd 01       	movw	r24, r26
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9e 83       	std	Y+6, r25	; 0x06
    267a:	8d 83       	std	Y+5, r24	; 0x05
    267c:	0f c0       	rjmp	.+30     	; 0x269c <main+0x18c>
    267e:	88 ec       	ldi	r24, 0xC8	; 200
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	9c 83       	std	Y+4, r25	; 0x04
    2684:	8b 83       	std	Y+3, r24	; 0x03
    2686:	8b 81       	ldd	r24, Y+3	; 0x03
    2688:	9c 81       	ldd	r25, Y+4	; 0x04
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <main+0x17a>
    268e:	9c 83       	std	Y+4, r25	; 0x04
    2690:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2692:	8d 81       	ldd	r24, Y+5	; 0x05
    2694:	9e 81       	ldd	r25, Y+6	; 0x06
    2696:	01 97       	sbiw	r24, 0x01	; 1
    2698:	9e 83       	std	Y+6, r25	; 0x06
    269a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    269c:	8d 81       	ldd	r24, Y+5	; 0x05
    269e:	9e 81       	ldd	r25, Y+6	; 0x06
    26a0:	00 97       	sbiw	r24, 0x00	; 0
    26a2:	69 f7       	brne	.-38     	; 0x267e <main+0x16e>
    26a4:	14 c0       	rjmp	.+40     	; 0x26ce <main+0x1be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26a6:	6f 81       	ldd	r22, Y+7	; 0x07
    26a8:	78 85       	ldd	r23, Y+8	; 0x08
    26aa:	89 85       	ldd	r24, Y+9	; 0x09
    26ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	9e 83       	std	Y+6, r25	; 0x06
    26b8:	8d 83       	std	Y+5, r24	; 0x05
    26ba:	8d 81       	ldd	r24, Y+5	; 0x05
    26bc:	9e 81       	ldd	r25, Y+6	; 0x06
    26be:	9a 83       	std	Y+2, r25	; 0x02
    26c0:	89 83       	std	Y+1, r24	; 0x01
    26c2:	89 81       	ldd	r24, Y+1	; 0x01
    26c4:	9a 81       	ldd	r25, Y+2	; 0x02
    26c6:	01 97       	sbiw	r24, 0x01	; 1
    26c8:	f1 f7       	brne	.-4      	; 0x26c6 <main+0x1b6>
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			//DIS_GlobalInterrupt();
			DIO_SetPortDirection(RAM_DATA_PORT,PORT_INPUT);
    26ce:	82 e0       	ldi	r24, 0x02	; 2
    26d0:	60 e0       	ldi	r22, 0x00	; 0
    26d2:	0e 94 4b 09 	call	0x1296	; 0x1296 <DIO_SetPortDirection>
			RamAddress = 0;
    26d6:	10 92 8c 00 	sts	0x008C, r1
    26da:	10 92 8d 00 	sts	0x008D, r1
    26de:	10 92 8e 00 	sts	0x008E, r1
    26e2:	10 92 8f 00 	sts	0x008F, r1
			RamData = RAM_ReadData(RamAddress);
    26e6:	80 91 8c 00 	lds	r24, 0x008C
    26ea:	90 91 8d 00 	lds	r25, 0x008D
    26ee:	a0 91 8e 00 	lds	r26, 0x008E
    26f2:	b0 91 8f 00 	lds	r27, 0x008F
    26f6:	bc 01       	movw	r22, r24
    26f8:	cd 01       	movw	r24, r26
    26fa:	0e 94 03 10 	call	0x2006	; 0x2006 <RAM_ReadData>
    26fe:	80 93 90 00 	sts	0x0090, r24
			TIMER1_INIT(0,RamData,0,249);
    2702:	80 91 90 00 	lds	r24, 0x0090
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	b9 01       	movw	r22, r18
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	50 e0       	ldi	r21, 0x00	; 0
    2714:	29 ef       	ldi	r18, 0xF9	; 249
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	0e 94 ab 11 	call	0x2356	; 0x2356 <TIMER1_INIT>
    271c:	58 cf       	rjmp	.-336    	; 0x25ce <main+0xbe>
			//EN_GlobalInterrupt();
		}
		else if(readDone == 1)
    271e:	80 91 a2 00 	lds	r24, 0x00A2
    2722:	81 30       	cpi	r24, 0x01	; 1
    2724:	09 f0       	breq	.+2      	; 0x2728 <main+0x218>
    2726:	53 cf       	rjmp	.-346    	; 0x25ce <main+0xbe>
		{
			readDone = 0;
    2728:	10 92 a2 00 	sts	0x00A2, r1
			MAX7219_writeData(0x01,0);
    272c:	81 e0       	ldi	r24, 0x01	; 1
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
			MAX7219_writeData(0x02,0);
    2734:	82 e0       	ldi	r24, 0x02	; 2
    2736:	60 e0       	ldi	r22, 0x00	; 0
    2738:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
			MAX7219_writeData(0x03,0);
    273c:	83 e0       	ldi	r24, 0x03	; 3
    273e:	60 e0       	ldi	r22, 0x00	; 0
    2740:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
			MAX7219_writeData(0x04,0);
    2744:	84 e0       	ldi	r24, 0x04	; 4
    2746:	60 e0       	ldi	r22, 0x00	; 0
    2748:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
    274c:	40 cf       	rjmp	.-384    	; 0x25ce <main+0xbe>

0000274e <AdcCap_MemoStore>:
		}
	}

	return 0;
}
void AdcCap_MemoStore(void){
    274e:	df 93       	push	r29
    2750:	cf 93       	push	r28
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
		INTCounter1 ++;
    2756:	80 91 99 00 	lds	r24, 0x0099
    275a:	90 91 9a 00 	lds	r25, 0x009A
    275e:	a0 91 9b 00 	lds	r26, 0x009B
    2762:	b0 91 9c 00 	lds	r27, 0x009C
    2766:	01 96       	adiw	r24, 0x01	; 1
    2768:	a1 1d       	adc	r26, r1
    276a:	b1 1d       	adc	r27, r1
    276c:	80 93 99 00 	sts	0x0099, r24
    2770:	90 93 9a 00 	sts	0x009A, r25
    2774:	a0 93 9b 00 	sts	0x009B, r26
    2778:	b0 93 9c 00 	sts	0x009C, r27
		if(INTCounter1 == 8000)
    277c:	80 91 99 00 	lds	r24, 0x0099
    2780:	90 91 9a 00 	lds	r25, 0x009A
    2784:	a0 91 9b 00 	lds	r26, 0x009B
    2788:	b0 91 9c 00 	lds	r27, 0x009C
    278c:	80 34       	cpi	r24, 0x40	; 64
    278e:	2f e1       	ldi	r18, 0x1F	; 31
    2790:	92 07       	cpc	r25, r18
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	a2 07       	cpc	r26, r18
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	b2 07       	cpc	r27, r18
    279a:	e9 f4       	brne	.+58     	; 0x27d6 <AdcCap_MemoStore+0x88>
		{
			INTCounter1 = 0;
    279c:	10 92 99 00 	sts	0x0099, r1
    27a0:	10 92 9a 00 	sts	0x009A, r1
    27a4:	10 92 9b 00 	sts	0x009B, r1
    27a8:	10 92 9c 00 	sts	0x009C, r1
			time ++;
    27ac:	80 91 91 00 	lds	r24, 0x0091
    27b0:	90 91 92 00 	lds	r25, 0x0092
    27b4:	a0 91 93 00 	lds	r26, 0x0093
    27b8:	b0 91 94 00 	lds	r27, 0x0094
    27bc:	01 96       	adiw	r24, 0x01	; 1
    27be:	a1 1d       	adc	r26, r1
    27c0:	b1 1d       	adc	r27, r1
    27c2:	80 93 91 00 	sts	0x0091, r24
    27c6:	90 93 92 00 	sts	0x0092, r25
    27ca:	a0 93 93 00 	sts	0x0093, r26
    27ce:	b0 93 94 00 	sts	0x0094, r27
			TimeDigSplit_Disp();
    27d2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <TimeDigSplit_Disp>
		}

		if (RamAddress == 131072)
    27d6:	80 91 8c 00 	lds	r24, 0x008C
    27da:	90 91 8d 00 	lds	r25, 0x008D
    27de:	a0 91 8e 00 	lds	r26, 0x008E
    27e2:	b0 91 8f 00 	lds	r27, 0x008F
    27e6:	80 30       	cpi	r24, 0x00	; 0
    27e8:	e0 e0       	ldi	r30, 0x00	; 0
    27ea:	9e 07       	cpc	r25, r30
    27ec:	e2 e0       	ldi	r30, 0x02	; 2
    27ee:	ae 07       	cpc	r26, r30
    27f0:	e0 e0       	ldi	r30, 0x00	; 0
    27f2:	be 07       	cpc	r27, r30
    27f4:	31 f4       	brne	.+12     	; 0x2802 <AdcCap_MemoStore+0xb4>
		{

			TIMER0_STOPPED();
    27f6:	0e 94 8f 11 	call	0x231e	; 0x231e <TIMER0_STOPPED>
			WriteDone = 1;
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	80 93 a1 00 	sts	0x00A1, r24
    2800:	c1 c0       	rjmp	.+386    	; 0x2984 <AdcCap_MemoStore+0x236>


		}
		else{
		ADC_GETVALUE_BLOCKING(0,&AdcResult);
    2802:	2b e8       	ldi	r18, 0x8B	; 139
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	b9 01       	movw	r22, r18
    280a:	0e 94 cd 05 	call	0xb9a	; 0xb9a <ADC_GETVALUE_BLOCKING>
		if(AdcResult > 249)
    280e:	80 91 8b 00 	lds	r24, 0x008B
    2812:	8a 3f       	cpi	r24, 0xFA	; 250
    2814:	18 f0       	brcs	.+6      	; 0x281c <AdcCap_MemoStore+0xce>
		{
			AdcResult=249;
    2816:	89 ef       	ldi	r24, 0xF9	; 249
    2818:	80 93 8b 00 	sts	0x008B, r24
		else{

		}
		/*Write operation*/
		//RAM_WriteData(RamAddress,AdcResult);
		DIO_SetPinValue(RAM_CTRL_PORT,ADR_16_PIN,(u8)((RamAddress >> 16) & 0x01));
    281c:	80 91 8c 00 	lds	r24, 0x008C
    2820:	90 91 8d 00 	lds	r25, 0x008D
    2824:	a0 91 8e 00 	lds	r26, 0x008E
    2828:	b0 91 8f 00 	lds	r27, 0x008F
    282c:	cd 01       	movw	r24, r26
    282e:	aa 27       	eor	r26, r26
    2830:	bb 27       	eor	r27, r27
    2832:	98 2f       	mov	r25, r24
    2834:	91 70       	andi	r25, 0x01	; 1
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	67 e0       	ldi	r22, 0x07	; 7
    283a:	49 2f       	mov	r20, r25
    283c:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
		SET_BIT(PORTA_register,LE_PIN);
    2840:	ab e3       	ldi	r26, 0x3B	; 59
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	eb e3       	ldi	r30, 0x3B	; 59
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	88 60       	ori	r24, 0x08	; 8
    284c:	8c 93       	st	X, r24
		DIO_SetPinValue(RAM_CTRL_PORT,ADR_13_5_PIN,(u8)((RamAddress >> 13) & 0x01));
    284e:	80 91 8c 00 	lds	r24, 0x008C
    2852:	90 91 8d 00 	lds	r25, 0x008D
    2856:	a0 91 8e 00 	lds	r26, 0x008E
    285a:	b0 91 8f 00 	lds	r27, 0x008F
    285e:	07 2e       	mov	r0, r23
    2860:	7d e0       	ldi	r23, 0x0D	; 13
    2862:	b6 95       	lsr	r27
    2864:	a7 95       	ror	r26
    2866:	97 95       	ror	r25
    2868:	87 95       	ror	r24
    286a:	7a 95       	dec	r23
    286c:	d1 f7       	brne	.-12     	; 0x2862 <AdcCap_MemoStore+0x114>
    286e:	70 2d       	mov	r23, r0
    2870:	98 2f       	mov	r25, r24
    2872:	91 70       	andi	r25, 0x01	; 1
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	49 2f       	mov	r20, r25
    287a:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
		RAM_ADR_PORT_REG =((RAM_ADR_PORT_REG & 0x20)|(u8)((RamAddress >> 8) & 0xDF));
    287e:	42 e3       	ldi	r20, 0x32	; 50
    2880:	50 e0       	ldi	r21, 0x00	; 0
    2882:	e2 e3       	ldi	r30, 0x32	; 50
    2884:	f0 e0       	ldi	r31, 0x00	; 0
    2886:	80 81       	ld	r24, Z
    2888:	28 2f       	mov	r18, r24
    288a:	20 72       	andi	r18, 0x20	; 32
    288c:	80 91 8c 00 	lds	r24, 0x008C
    2890:	90 91 8d 00 	lds	r25, 0x008D
    2894:	a0 91 8e 00 	lds	r26, 0x008E
    2898:	b0 91 8f 00 	lds	r27, 0x008F
    289c:	89 2f       	mov	r24, r25
    289e:	9a 2f       	mov	r25, r26
    28a0:	ab 2f       	mov	r26, r27
    28a2:	bb 27       	eor	r27, r27
    28a4:	8f 7d       	andi	r24, 0xDF	; 223
    28a6:	82 2b       	or	r24, r18
    28a8:	fa 01       	movw	r30, r20
    28aa:	80 83       	st	Z, r24
		CLR_BIT(PORTA_register,LE_PIN);
    28ac:	ab e3       	ldi	r26, 0x3B	; 59
    28ae:	b0 e0       	ldi	r27, 0x00	; 0
    28b0:	eb e3       	ldi	r30, 0x3B	; 59
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	87 7f       	andi	r24, 0xF7	; 247
    28b8:	8c 93       	st	X, r24
		DIO_SetPinValue(RAM_CTRL_PORT,ADR_13_5_PIN,(u8)((RamAddress >> 5) & 0x01));
    28ba:	80 91 8c 00 	lds	r24, 0x008C
    28be:	90 91 8d 00 	lds	r25, 0x008D
    28c2:	a0 91 8e 00 	lds	r26, 0x008E
    28c6:	b0 91 8f 00 	lds	r27, 0x008F
    28ca:	68 94       	set
    28cc:	14 f8       	bld	r1, 4
    28ce:	b6 95       	lsr	r27
    28d0:	a7 95       	ror	r26
    28d2:	97 95       	ror	r25
    28d4:	87 95       	ror	r24
    28d6:	16 94       	lsr	r1
    28d8:	d1 f7       	brne	.-12     	; 0x28ce <AdcCap_MemoStore+0x180>
    28da:	98 2f       	mov	r25, r24
    28dc:	91 70       	andi	r25, 0x01	; 1
    28de:	80 e0       	ldi	r24, 0x00	; 0
    28e0:	61 e0       	ldi	r22, 0x01	; 1
    28e2:	49 2f       	mov	r20, r25
    28e4:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
		RAM_ADR_PORT_REG =((RAM_ADR_PORT_REG & 0x20)|((u8)(RamAddress) & 0xDF));
    28e8:	22 e3       	ldi	r18, 0x32	; 50
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	e2 e3       	ldi	r30, 0x32	; 50
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	48 2f       	mov	r20, r24
    28f4:	40 72       	andi	r20, 0x20	; 32
    28f6:	80 91 8c 00 	lds	r24, 0x008C
    28fa:	90 91 8d 00 	lds	r25, 0x008D
    28fe:	a0 91 8e 00 	lds	r26, 0x008E
    2902:	b0 91 8f 00 	lds	r27, 0x008F
    2906:	8f 7d       	andi	r24, 0xDF	; 223
    2908:	84 2b       	or	r24, r20
    290a:	f9 01       	movw	r30, r18
    290c:	80 83       	st	Z, r24

		CLR_BIT(PORTA_register,CE1_PIN);
    290e:	ab e3       	ldi	r26, 0x3B	; 59
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	eb e3       	ldi	r30, 0x3B	; 59
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	8f 7b       	andi	r24, 0xBF	; 191
    291a:	8c 93       	st	X, r24
		SET_BIT(PORTA_register,OE1_PIN);
    291c:	ab e3       	ldi	r26, 0x3B	; 59
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	eb e3       	ldi	r30, 0x3B	; 59
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	80 61       	ori	r24, 0x10	; 16
    2928:	8c 93       	st	X, r24
		CLR_BIT(PORTA_register,WE1_PIN);
    292a:	ab e3       	ldi	r26, 0x3B	; 59
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	eb e3       	ldi	r30, 0x3B	; 59
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	8f 7d       	andi	r24, 0xDF	; 223
    2936:	8c 93       	st	X, r24


		PORTC_register = AdcResult;
    2938:	e5 e3       	ldi	r30, 0x35	; 53
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 91 8b 00 	lds	r24, 0x008B
    2940:	80 83       	st	Z, r24
		SET_BIT(PORTA_register,WE1_PIN);
    2942:	ab e3       	ldi	r26, 0x3B	; 59
    2944:	b0 e0       	ldi	r27, 0x00	; 0
    2946:	eb e3       	ldi	r30, 0x3B	; 59
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 81       	ld	r24, Z
    294c:	80 62       	ori	r24, 0x20	; 32
    294e:	8c 93       	st	X, r24

		SET_BIT(PORTB_register,PIN0);
    2950:	a8 e3       	ldi	r26, 0x38	; 56
    2952:	b0 e0       	ldi	r27, 0x00	; 0
    2954:	e8 e3       	ldi	r30, 0x38	; 56
    2956:	f0 e0       	ldi	r31, 0x00	; 0
    2958:	80 81       	ld	r24, Z
    295a:	81 60       	ori	r24, 0x01	; 1
    295c:	8c 93       	st	X, r24
		/*INC ADR*/
		RamAddress ++ ;
    295e:	80 91 8c 00 	lds	r24, 0x008C
    2962:	90 91 8d 00 	lds	r25, 0x008D
    2966:	a0 91 8e 00 	lds	r26, 0x008E
    296a:	b0 91 8f 00 	lds	r27, 0x008F
    296e:	01 96       	adiw	r24, 0x01	; 1
    2970:	a1 1d       	adc	r26, r1
    2972:	b1 1d       	adc	r27, r1
    2974:	80 93 8c 00 	sts	0x008C, r24
    2978:	90 93 8d 00 	sts	0x008D, r25
    297c:	a0 93 8e 00 	sts	0x008E, r26
    2980:	b0 93 8f 00 	sts	0x008F, r27
		}



}
    2984:	cf 91       	pop	r28
    2986:	df 91       	pop	r29
    2988:	08 95       	ret

0000298a <Read_GenPWM>:
void Read_GenPWM(void)
{
    298a:	df 93       	push	r29
    298c:	cf 93       	push	r28
    298e:	cd b7       	in	r28, 0x3d	; 61
    2990:	de b7       	in	r29, 0x3e	; 62

	INTCounter2 ++;
    2992:	80 91 9d 00 	lds	r24, 0x009D
    2996:	90 91 9e 00 	lds	r25, 0x009E
    299a:	a0 91 9f 00 	lds	r26, 0x009F
    299e:	b0 91 a0 00 	lds	r27, 0x00A0
    29a2:	01 96       	adiw	r24, 0x01	; 1
    29a4:	a1 1d       	adc	r26, r1
    29a6:	b1 1d       	adc	r27, r1
    29a8:	80 93 9d 00 	sts	0x009D, r24
    29ac:	90 93 9e 00 	sts	0x009E, r25
    29b0:	a0 93 9f 00 	sts	0x009F, r26
    29b4:	b0 93 a0 00 	sts	0x00A0, r27
	if((INTCounter2 == 32000))
    29b8:	80 91 9d 00 	lds	r24, 0x009D
    29bc:	90 91 9e 00 	lds	r25, 0x009E
    29c0:	a0 91 9f 00 	lds	r26, 0x009F
    29c4:	b0 91 a0 00 	lds	r27, 0x00A0
    29c8:	80 30       	cpi	r24, 0x00	; 0
    29ca:	2d e7       	ldi	r18, 0x7D	; 125
    29cc:	92 07       	cpc	r25, r18
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	a2 07       	cpc	r26, r18
    29d2:	20 e0       	ldi	r18, 0x00	; 0
    29d4:	b2 07       	cpc	r27, r18
    29d6:	e9 f4       	brne	.+58     	; 0x2a12 <Read_GenPWM+0x88>
	{
		INTCounter2 = 0;
    29d8:	10 92 9d 00 	sts	0x009D, r1
    29dc:	10 92 9e 00 	sts	0x009E, r1
    29e0:	10 92 9f 00 	sts	0x009F, r1
    29e4:	10 92 a0 00 	sts	0x00A0, r1
		time --;
    29e8:	80 91 91 00 	lds	r24, 0x0091
    29ec:	90 91 92 00 	lds	r25, 0x0092
    29f0:	a0 91 93 00 	lds	r26, 0x0093
    29f4:	b0 91 94 00 	lds	r27, 0x0094
    29f8:	01 97       	sbiw	r24, 0x01	; 1
    29fa:	a1 09       	sbc	r26, r1
    29fc:	b1 09       	sbc	r27, r1
    29fe:	80 93 91 00 	sts	0x0091, r24
    2a02:	90 93 92 00 	sts	0x0092, r25
    2a06:	a0 93 93 00 	sts	0x0093, r26
    2a0a:	b0 93 94 00 	sts	0x0094, r27
		TimeDigSplit_Disp();
    2a0e:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <TimeDigSplit_Disp>
	}

	if (RamAddress == 131072)
    2a12:	80 91 8c 00 	lds	r24, 0x008C
    2a16:	90 91 8d 00 	lds	r25, 0x008D
    2a1a:	a0 91 8e 00 	lds	r26, 0x008E
    2a1e:	b0 91 8f 00 	lds	r27, 0x008F
    2a22:	80 30       	cpi	r24, 0x00	; 0
    2a24:	e0 e0       	ldi	r30, 0x00	; 0
    2a26:	9e 07       	cpc	r25, r30
    2a28:	e2 e0       	ldi	r30, 0x02	; 2
    2a2a:	ae 07       	cpc	r26, r30
    2a2c:	e0 e0       	ldi	r30, 0x00	; 0
    2a2e:	be 07       	cpc	r27, r30
    2a30:	31 f4       	brne	.+12     	; 0x2a3e <Read_GenPWM+0xb4>
	{

		TIMER1_STOPPED();
    2a32:	0e 94 5e 12 	call	0x24bc	; 0x24bc <TIMER1_STOPPED>
		readDone = 1;
    2a36:	81 e0       	ldi	r24, 0x01	; 1
    2a38:	80 93 a2 00 	sts	0x00A2, r24
    2a3c:	cc c0       	rjmp	.+408    	; 0x2bd6 <Read_GenPWM+0x24c>

	}
	else if((INTCounter2 % 4) == 0)
    2a3e:	80 91 9d 00 	lds	r24, 0x009D
    2a42:	90 91 9e 00 	lds	r25, 0x009E
    2a46:	a0 91 9f 00 	lds	r26, 0x009F
    2a4a:	b0 91 a0 00 	lds	r27, 0x00A0
    2a4e:	83 70       	andi	r24, 0x03	; 3
    2a50:	90 70       	andi	r25, 0x00	; 0
    2a52:	a0 70       	andi	r26, 0x00	; 0
    2a54:	b0 70       	andi	r27, 0x00	; 0
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	a1 05       	cpc	r26, r1
    2a5a:	b1 05       	cpc	r27, r1
    2a5c:	09 f0       	breq	.+2      	; 0x2a60 <Read_GenPWM+0xd6>
    2a5e:	bb c0       	rjmp	.+374    	; 0x2bd6 <Read_GenPWM+0x24c>
	{

	RamAddress ++ ;
    2a60:	80 91 8c 00 	lds	r24, 0x008C
    2a64:	90 91 8d 00 	lds	r25, 0x008D
    2a68:	a0 91 8e 00 	lds	r26, 0x008E
    2a6c:	b0 91 8f 00 	lds	r27, 0x008F
    2a70:	01 96       	adiw	r24, 0x01	; 1
    2a72:	a1 1d       	adc	r26, r1
    2a74:	b1 1d       	adc	r27, r1
    2a76:	80 93 8c 00 	sts	0x008C, r24
    2a7a:	90 93 8d 00 	sts	0x008D, r25
    2a7e:	a0 93 8e 00 	sts	0x008E, r26
    2a82:	b0 93 8f 00 	sts	0x008F, r27
	/*Read*/
	DIO_SetPinValue(RAM_CTRL_PORT,ADR_16_PIN,(u8)((RamAddress >> 16) & 0x01));
    2a86:	80 91 8c 00 	lds	r24, 0x008C
    2a8a:	90 91 8d 00 	lds	r25, 0x008D
    2a8e:	a0 91 8e 00 	lds	r26, 0x008E
    2a92:	b0 91 8f 00 	lds	r27, 0x008F
    2a96:	cd 01       	movw	r24, r26
    2a98:	aa 27       	eor	r26, r26
    2a9a:	bb 27       	eor	r27, r27
    2a9c:	98 2f       	mov	r25, r24
    2a9e:	91 70       	andi	r25, 0x01	; 1
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	67 e0       	ldi	r22, 0x07	; 7
    2aa4:	49 2f       	mov	r20, r25
    2aa6:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	SET_BIT(PORTA_register,LE_PIN);
    2aaa:	ab e3       	ldi	r26, 0x3B	; 59
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	eb e3       	ldi	r30, 0x3B	; 59
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	80 81       	ld	r24, Z
    2ab4:	88 60       	ori	r24, 0x08	; 8
    2ab6:	8c 93       	st	X, r24
	DIO_SetPinValue(RAM_CTRL_PORT,ADR_13_5_PIN,(u8)((RamAddress >> 13) & 0x01));
    2ab8:	80 91 8c 00 	lds	r24, 0x008C
    2abc:	90 91 8d 00 	lds	r25, 0x008D
    2ac0:	a0 91 8e 00 	lds	r26, 0x008E
    2ac4:	b0 91 8f 00 	lds	r27, 0x008F
    2ac8:	07 2e       	mov	r0, r23
    2aca:	7d e0       	ldi	r23, 0x0D	; 13
    2acc:	b6 95       	lsr	r27
    2ace:	a7 95       	ror	r26
    2ad0:	97 95       	ror	r25
    2ad2:	87 95       	ror	r24
    2ad4:	7a 95       	dec	r23
    2ad6:	d1 f7       	brne	.-12     	; 0x2acc <Read_GenPWM+0x142>
    2ad8:	70 2d       	mov	r23, r0
    2ada:	98 2f       	mov	r25, r24
    2adc:	91 70       	andi	r25, 0x01	; 1
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	49 2f       	mov	r20, r25
    2ae4:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	RAM_ADR_PORT_REG =((RAM_ADR_PORT_REG & 0x20)|(u8)((RamAddress >> 8) & 0xDF));
    2ae8:	42 e3       	ldi	r20, 0x32	; 50
    2aea:	50 e0       	ldi	r21, 0x00	; 0
    2aec:	e2 e3       	ldi	r30, 0x32	; 50
    2aee:	f0 e0       	ldi	r31, 0x00	; 0
    2af0:	80 81       	ld	r24, Z
    2af2:	28 2f       	mov	r18, r24
    2af4:	20 72       	andi	r18, 0x20	; 32
    2af6:	80 91 8c 00 	lds	r24, 0x008C
    2afa:	90 91 8d 00 	lds	r25, 0x008D
    2afe:	a0 91 8e 00 	lds	r26, 0x008E
    2b02:	b0 91 8f 00 	lds	r27, 0x008F
    2b06:	89 2f       	mov	r24, r25
    2b08:	9a 2f       	mov	r25, r26
    2b0a:	ab 2f       	mov	r26, r27
    2b0c:	bb 27       	eor	r27, r27
    2b0e:	8f 7d       	andi	r24, 0xDF	; 223
    2b10:	82 2b       	or	r24, r18
    2b12:	fa 01       	movw	r30, r20
    2b14:	80 83       	st	Z, r24
	CLR_BIT(PORTA_register,LE_PIN);
    2b16:	ab e3       	ldi	r26, 0x3B	; 59
    2b18:	b0 e0       	ldi	r27, 0x00	; 0
    2b1a:	eb e3       	ldi	r30, 0x3B	; 59
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	87 7f       	andi	r24, 0xF7	; 247
    2b22:	8c 93       	st	X, r24
	DIO_SetPinValue(RAM_CTRL_PORT,ADR_13_5_PIN,(u8)((RamAddress >> 5) & 0x01));
    2b24:	80 91 8c 00 	lds	r24, 0x008C
    2b28:	90 91 8d 00 	lds	r25, 0x008D
    2b2c:	a0 91 8e 00 	lds	r26, 0x008E
    2b30:	b0 91 8f 00 	lds	r27, 0x008F
    2b34:	68 94       	set
    2b36:	14 f8       	bld	r1, 4
    2b38:	b6 95       	lsr	r27
    2b3a:	a7 95       	ror	r26
    2b3c:	97 95       	ror	r25
    2b3e:	87 95       	ror	r24
    2b40:	16 94       	lsr	r1
    2b42:	d1 f7       	brne	.-12     	; 0x2b38 <Read_GenPWM+0x1ae>
    2b44:	98 2f       	mov	r25, r24
    2b46:	91 70       	andi	r25, 0x01	; 1
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	61 e0       	ldi	r22, 0x01	; 1
    2b4c:	49 2f       	mov	r20, r25
    2b4e:	0e 94 1a 07 	call	0xe34	; 0xe34 <DIO_SetPinValue>
	RAM_ADR_PORT_REG =((RAM_ADR_PORT_REG & 0x20)|((u8)(RamAddress) & 0xDF));
    2b52:	22 e3       	ldi	r18, 0x32	; 50
    2b54:	30 e0       	ldi	r19, 0x00	; 0
    2b56:	e2 e3       	ldi	r30, 0x32	; 50
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	80 81       	ld	r24, Z
    2b5c:	48 2f       	mov	r20, r24
    2b5e:	40 72       	andi	r20, 0x20	; 32
    2b60:	80 91 8c 00 	lds	r24, 0x008C
    2b64:	90 91 8d 00 	lds	r25, 0x008D
    2b68:	a0 91 8e 00 	lds	r26, 0x008E
    2b6c:	b0 91 8f 00 	lds	r27, 0x008F
    2b70:	8f 7d       	andi	r24, 0xDF	; 223
    2b72:	84 2b       	or	r24, r20
    2b74:	f9 01       	movw	r30, r18
    2b76:	80 83       	st	Z, r24
	/*Setting Control Signals to read*/
	SET_BIT(PORTA_register,WE1_PIN);
    2b78:	ab e3       	ldi	r26, 0x3B	; 59
    2b7a:	b0 e0       	ldi	r27, 0x00	; 0
    2b7c:	eb e3       	ldi	r30, 0x3B	; 59
    2b7e:	f0 e0       	ldi	r31, 0x00	; 0
    2b80:	80 81       	ld	r24, Z
    2b82:	80 62       	ori	r24, 0x20	; 32
    2b84:	8c 93       	st	X, r24
	CLR_BIT(PORTA_register,OE1_PIN);
    2b86:	ab e3       	ldi	r26, 0x3B	; 59
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	eb e3       	ldi	r30, 0x3B	; 59
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	80 81       	ld	r24, Z
    2b90:	8f 7e       	andi	r24, 0xEF	; 239
    2b92:	8c 93       	st	X, r24
	CLR_BIT(PORTA_register,CE1_PIN);
    2b94:	ab e3       	ldi	r26, 0x3B	; 59
    2b96:	b0 e0       	ldi	r27, 0x00	; 0
    2b98:	eb e3       	ldi	r30, 0x3B	; 59
    2b9a:	f0 e0       	ldi	r31, 0x00	; 0
    2b9c:	80 81       	ld	r24, Z
    2b9e:	8f 7b       	andi	r24, 0xBF	; 191
    2ba0:	8c 93       	st	X, r24
	/*Getting Data from RAM*/
	RamData = RAM_DATA_READ_REG;
    2ba2:	e3 e3       	ldi	r30, 0x33	; 51
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	80 93 90 00 	sts	0x0090, r24
	/*DISABLE RAM output*/
	SET_BIT(PORTA_register,OE1_PIN);
    2bac:	ab e3       	ldi	r26, 0x3B	; 59
    2bae:	b0 e0       	ldi	r27, 0x00	; 0
    2bb0:	eb e3       	ldi	r30, 0x3B	; 59
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	80 61       	ori	r24, 0x10	; 16
    2bb8:	8c 93       	st	X, r24

	TIM1_Set_CMPA_REG_Value(RamData);
    2bba:	80 91 90 00 	lds	r24, 0x0090
    2bbe:	88 2f       	mov	r24, r24
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	0e 94 16 12 	call	0x242c	; 0x242c <TIM1_Set_CMPA_REG_Value>


	TOG_BIT(PORTB_register,PIN0);
    2bc6:	a8 e3       	ldi	r26, 0x38	; 56
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	e8 e3       	ldi	r30, 0x38	; 56
    2bcc:	f0 e0       	ldi	r31, 0x00	; 0
    2bce:	90 81       	ld	r25, Z
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	89 27       	eor	r24, r25
    2bd4:	8c 93       	st	X, r24

	}
	else{}
}
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <TimeDigSplit_Disp>:
void TimeDigSplit_Disp(void){
    2bdc:	1f 93       	push	r17
    2bde:	df 93       	push	r29
    2be0:	cf 93       	push	r28
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <TimeDigSplit_Disp+0x8>
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
	u8 tempSec = 0;
    2be8:	1a 82       	std	Y+2, r1	; 0x02
	u8 tempMin = 0;
    2bea:	19 82       	std	Y+1, r1	; 0x01

	tempMin = (u8)(time/(u32)60);
    2bec:	80 91 91 00 	lds	r24, 0x0091
    2bf0:	90 91 92 00 	lds	r25, 0x0092
    2bf4:	a0 91 93 00 	lds	r26, 0x0093
    2bf8:	b0 91 94 00 	lds	r27, 0x0094
    2bfc:	2c e3       	ldi	r18, 0x3C	; 60
    2bfe:	30 e0       	ldi	r19, 0x00	; 0
    2c00:	40 e0       	ldi	r20, 0x00	; 0
    2c02:	50 e0       	ldi	r21, 0x00	; 0
    2c04:	bc 01       	movw	r22, r24
    2c06:	cd 01       	movw	r24, r26
    2c08:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <__udivmodsi4>
    2c0c:	da 01       	movw	r26, r20
    2c0e:	c9 01       	movw	r24, r18
    2c10:	89 83       	std	Y+1, r24	; 0x01
	tempSec = (u8)(time - (tempMin *(u32)60));
    2c12:	80 91 91 00 	lds	r24, 0x0091
    2c16:	90 91 92 00 	lds	r25, 0x0092
    2c1a:	a0 91 93 00 	lds	r26, 0x0093
    2c1e:	b0 91 94 00 	lds	r27, 0x0094
    2c22:	18 2f       	mov	r17, r24
    2c24:	89 81       	ldd	r24, Y+1	; 0x01
    2c26:	88 2f       	mov	r24, r24
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a0 e0       	ldi	r26, 0x00	; 0
    2c2c:	b0 e0       	ldi	r27, 0x00	; 0
    2c2e:	2c e3       	ldi	r18, 0x3C	; 60
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	bc 01       	movw	r22, r24
    2c38:	cd 01       	movw	r24, r26
    2c3a:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <__mulsi3>
    2c3e:	dc 01       	movw	r26, r24
    2c40:	cb 01       	movw	r24, r22
    2c42:	91 2f       	mov	r25, r17
    2c44:	98 1b       	sub	r25, r24
    2c46:	89 2f       	mov	r24, r25
    2c48:	8a 83       	std	Y+2, r24	; 0x02
	secH =(u8)(tempSec/(u8)10);
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9a e0       	ldi	r25, 0x0A	; 10
    2c4e:	69 2f       	mov	r22, r25
    2c50:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__udivmodqi4>
    2c54:	80 93 96 00 	sts	0x0096, r24
	secL =(u8)(tempSec - (secH*(u8)10));
    2c58:	80 91 96 00 	lds	r24, 0x0096
    2c5c:	88 2f       	mov	r24, r24
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	9c 01       	movw	r18, r24
    2c62:	22 0f       	add	r18, r18
    2c64:	33 1f       	adc	r19, r19
    2c66:	c9 01       	movw	r24, r18
    2c68:	88 0f       	add	r24, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	82 0f       	add	r24, r18
    2c72:	93 1f       	adc	r25, r19
    2c74:	90 95       	com	r25
    2c76:	81 95       	neg	r24
    2c78:	9f 4f       	sbci	r25, 0xFF	; 255
    2c7a:	98 2f       	mov	r25, r24
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	89 0f       	add	r24, r25
    2c80:	80 93 95 00 	sts	0x0095, r24
	minH =(u8)(tempMin/(u8)10);
    2c84:	89 81       	ldd	r24, Y+1	; 0x01
    2c86:	9a e0       	ldi	r25, 0x0A	; 10
    2c88:	69 2f       	mov	r22, r25
    2c8a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <__udivmodqi4>
    2c8e:	80 93 98 00 	sts	0x0098, r24
	minL =(u8)(tempMin - (minH*(u8)10));
    2c92:	80 91 98 00 	lds	r24, 0x0098
    2c96:	88 2f       	mov	r24, r24
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	9c 01       	movw	r18, r24
    2c9c:	22 0f       	add	r18, r18
    2c9e:	33 1f       	adc	r19, r19
    2ca0:	c9 01       	movw	r24, r18
    2ca2:	88 0f       	add	r24, r24
    2ca4:	99 1f       	adc	r25, r25
    2ca6:	88 0f       	add	r24, r24
    2ca8:	99 1f       	adc	r25, r25
    2caa:	82 0f       	add	r24, r18
    2cac:	93 1f       	adc	r25, r19
    2cae:	90 95       	com	r25
    2cb0:	81 95       	neg	r24
    2cb2:	9f 4f       	sbci	r25, 0xFF	; 255
    2cb4:	98 2f       	mov	r25, r24
    2cb6:	89 81       	ldd	r24, Y+1	; 0x01
    2cb8:	89 0f       	add	r24, r25
    2cba:	80 93 97 00 	sts	0x0097, r24

	MAX7219_writeData(0x01,secL);
    2cbe:	90 91 95 00 	lds	r25, 0x0095
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	69 2f       	mov	r22, r25
    2cc6:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
	MAX7219_writeData(0x02,secH);
    2cca:	90 91 96 00 	lds	r25, 0x0096
    2cce:	82 e0       	ldi	r24, 0x02	; 2
    2cd0:	69 2f       	mov	r22, r25
    2cd2:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
	MAX7219_writeData(0x03,minL);
    2cd6:	90 91 97 00 	lds	r25, 0x0097
    2cda:	83 e0       	ldi	r24, 0x03	; 3
    2cdc:	69 2f       	mov	r22, r25
    2cde:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>
	MAX7219_writeData(0x04,minH);
    2ce2:	90 91 98 00 	lds	r25, 0x0098
    2ce6:	84 e0       	ldi	r24, 0x04	; 4
    2ce8:	69 2f       	mov	r22, r25
    2cea:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <MAX7219_writeData>

}
    2cee:	0f 90       	pop	r0
    2cf0:	0f 90       	pop	r0
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	1f 91       	pop	r17
    2cf8:	08 95       	ret

00002cfa <__mulsi3>:
    2cfa:	62 9f       	mul	r22, r18
    2cfc:	d0 01       	movw	r26, r0
    2cfe:	73 9f       	mul	r23, r19
    2d00:	f0 01       	movw	r30, r0
    2d02:	82 9f       	mul	r24, r18
    2d04:	e0 0d       	add	r30, r0
    2d06:	f1 1d       	adc	r31, r1
    2d08:	64 9f       	mul	r22, r20
    2d0a:	e0 0d       	add	r30, r0
    2d0c:	f1 1d       	adc	r31, r1
    2d0e:	92 9f       	mul	r25, r18
    2d10:	f0 0d       	add	r31, r0
    2d12:	83 9f       	mul	r24, r19
    2d14:	f0 0d       	add	r31, r0
    2d16:	74 9f       	mul	r23, r20
    2d18:	f0 0d       	add	r31, r0
    2d1a:	65 9f       	mul	r22, r21
    2d1c:	f0 0d       	add	r31, r0
    2d1e:	99 27       	eor	r25, r25
    2d20:	72 9f       	mul	r23, r18
    2d22:	b0 0d       	add	r27, r0
    2d24:	e1 1d       	adc	r30, r1
    2d26:	f9 1f       	adc	r31, r25
    2d28:	63 9f       	mul	r22, r19
    2d2a:	b0 0d       	add	r27, r0
    2d2c:	e1 1d       	adc	r30, r1
    2d2e:	f9 1f       	adc	r31, r25
    2d30:	bd 01       	movw	r22, r26
    2d32:	cf 01       	movw	r24, r30
    2d34:	11 24       	eor	r1, r1
    2d36:	08 95       	ret

00002d38 <__udivmodqi4>:
    2d38:	99 1b       	sub	r25, r25
    2d3a:	79 e0       	ldi	r23, 0x09	; 9
    2d3c:	04 c0       	rjmp	.+8      	; 0x2d46 <__udivmodqi4_ep>

00002d3e <__udivmodqi4_loop>:
    2d3e:	99 1f       	adc	r25, r25
    2d40:	96 17       	cp	r25, r22
    2d42:	08 f0       	brcs	.+2      	; 0x2d46 <__udivmodqi4_ep>
    2d44:	96 1b       	sub	r25, r22

00002d46 <__udivmodqi4_ep>:
    2d46:	88 1f       	adc	r24, r24
    2d48:	7a 95       	dec	r23
    2d4a:	c9 f7       	brne	.-14     	; 0x2d3e <__udivmodqi4_loop>
    2d4c:	80 95       	com	r24
    2d4e:	08 95       	ret

00002d50 <__udivmodsi4>:
    2d50:	a1 e2       	ldi	r26, 0x21	; 33
    2d52:	1a 2e       	mov	r1, r26
    2d54:	aa 1b       	sub	r26, r26
    2d56:	bb 1b       	sub	r27, r27
    2d58:	fd 01       	movw	r30, r26
    2d5a:	0d c0       	rjmp	.+26     	; 0x2d76 <__udivmodsi4_ep>

00002d5c <__udivmodsi4_loop>:
    2d5c:	aa 1f       	adc	r26, r26
    2d5e:	bb 1f       	adc	r27, r27
    2d60:	ee 1f       	adc	r30, r30
    2d62:	ff 1f       	adc	r31, r31
    2d64:	a2 17       	cp	r26, r18
    2d66:	b3 07       	cpc	r27, r19
    2d68:	e4 07       	cpc	r30, r20
    2d6a:	f5 07       	cpc	r31, r21
    2d6c:	20 f0       	brcs	.+8      	; 0x2d76 <__udivmodsi4_ep>
    2d6e:	a2 1b       	sub	r26, r18
    2d70:	b3 0b       	sbc	r27, r19
    2d72:	e4 0b       	sbc	r30, r20
    2d74:	f5 0b       	sbc	r31, r21

00002d76 <__udivmodsi4_ep>:
    2d76:	66 1f       	adc	r22, r22
    2d78:	77 1f       	adc	r23, r23
    2d7a:	88 1f       	adc	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	1a 94       	dec	r1
    2d80:	69 f7       	brne	.-38     	; 0x2d5c <__udivmodsi4_loop>
    2d82:	60 95       	com	r22
    2d84:	70 95       	com	r23
    2d86:	80 95       	com	r24
    2d88:	90 95       	com	r25
    2d8a:	9b 01       	movw	r18, r22
    2d8c:	ac 01       	movw	r20, r24
    2d8e:	bd 01       	movw	r22, r26
    2d90:	cf 01       	movw	r24, r30
    2d92:	08 95       	ret

00002d94 <__divmodsi4>:
    2d94:	97 fb       	bst	r25, 7
    2d96:	09 2e       	mov	r0, r25
    2d98:	05 26       	eor	r0, r21
    2d9a:	0e d0       	rcall	.+28     	; 0x2db8 <__divmodsi4_neg1>
    2d9c:	57 fd       	sbrc	r21, 7
    2d9e:	04 d0       	rcall	.+8      	; 0x2da8 <__divmodsi4_neg2>
    2da0:	d7 df       	rcall	.-82     	; 0x2d50 <__udivmodsi4>
    2da2:	0a d0       	rcall	.+20     	; 0x2db8 <__divmodsi4_neg1>
    2da4:	00 1c       	adc	r0, r0
    2da6:	38 f4       	brcc	.+14     	; 0x2db6 <__divmodsi4_exit>

00002da8 <__divmodsi4_neg2>:
    2da8:	50 95       	com	r21
    2daa:	40 95       	com	r20
    2dac:	30 95       	com	r19
    2dae:	21 95       	neg	r18
    2db0:	3f 4f       	sbci	r19, 0xFF	; 255
    2db2:	4f 4f       	sbci	r20, 0xFF	; 255
    2db4:	5f 4f       	sbci	r21, 0xFF	; 255

00002db6 <__divmodsi4_exit>:
    2db6:	08 95       	ret

00002db8 <__divmodsi4_neg1>:
    2db8:	f6 f7       	brtc	.-4      	; 0x2db6 <__divmodsi4_exit>
    2dba:	90 95       	com	r25
    2dbc:	80 95       	com	r24
    2dbe:	70 95       	com	r23
    2dc0:	61 95       	neg	r22
    2dc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dc4:	8f 4f       	sbci	r24, 0xFF	; 255
    2dc6:	9f 4f       	sbci	r25, 0xFF	; 255
    2dc8:	08 95       	ret

00002dca <__prologue_saves__>:
    2dca:	2f 92       	push	r2
    2dcc:	3f 92       	push	r3
    2dce:	4f 92       	push	r4
    2dd0:	5f 92       	push	r5
    2dd2:	6f 92       	push	r6
    2dd4:	7f 92       	push	r7
    2dd6:	8f 92       	push	r8
    2dd8:	9f 92       	push	r9
    2dda:	af 92       	push	r10
    2ddc:	bf 92       	push	r11
    2dde:	cf 92       	push	r12
    2de0:	df 92       	push	r13
    2de2:	ef 92       	push	r14
    2de4:	ff 92       	push	r15
    2de6:	0f 93       	push	r16
    2de8:	1f 93       	push	r17
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	ca 1b       	sub	r28, r26
    2df4:	db 0b       	sbc	r29, r27
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	09 94       	ijmp

00002e02 <__epilogue_restores__>:
    2e02:	2a 88       	ldd	r2, Y+18	; 0x12
    2e04:	39 88       	ldd	r3, Y+17	; 0x11
    2e06:	48 88       	ldd	r4, Y+16	; 0x10
    2e08:	5f 84       	ldd	r5, Y+15	; 0x0f
    2e0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2e0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2e0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2e10:	9b 84       	ldd	r9, Y+11	; 0x0b
    2e12:	aa 84       	ldd	r10, Y+10	; 0x0a
    2e14:	b9 84       	ldd	r11, Y+9	; 0x09
    2e16:	c8 84       	ldd	r12, Y+8	; 0x08
    2e18:	df 80       	ldd	r13, Y+7	; 0x07
    2e1a:	ee 80       	ldd	r14, Y+6	; 0x06
    2e1c:	fd 80       	ldd	r15, Y+5	; 0x05
    2e1e:	0c 81       	ldd	r16, Y+4	; 0x04
    2e20:	1b 81       	ldd	r17, Y+3	; 0x03
    2e22:	aa 81       	ldd	r26, Y+2	; 0x02
    2e24:	b9 81       	ldd	r27, Y+1	; 0x01
    2e26:	ce 0f       	add	r28, r30
    2e28:	d1 1d       	adc	r29, r1
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	ed 01       	movw	r28, r26
    2e36:	08 95       	ret

00002e38 <_exit>:
    2e38:	f8 94       	cli

00002e3a <__stop_program>:
    2e3a:	ff cf       	rjmp	.-2      	; 0x2e3a <__stop_program>
